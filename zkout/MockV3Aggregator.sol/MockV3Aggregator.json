{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"MockV3Aggregator.sol:MockV3Aggregator\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[5]\n\tptr.add\tr1, r0, r7\n\tadd\tr7, r0, r1\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, r1\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_10\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r1, r2\n\tjump.lt\t@.BB0_18\n\tld\tr7, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_5[0], r2, r3\n\tjump.gt\t@.BB0_19\n\tsub.s!\t@CPI0_13[0], r2, r3\n\tjump.gt\t@.BB0_28\n\tsub.s!\t@CPI0_17[0], r2, r3\n\tjump.eq\t@.BB0_42\n\tsub.s!\t@CPI0_18[0], r2, r3\n\tjump.eq\t@.BB0_44\n\tsub.s!\t@CPI0_19[0], r2, r1\n\tjump.ne\t@.BB0_18\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n\tadd\t1, r0, r1\n\tjump\t@.BB0_9\n.BB0_10:\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_18\n\tadd\t31, r1, r2\n\tand\t@CPI0_1[0], r2, r2\n\tadd\t128, r2, r2\n\tst.1\t64, r2\n\tand\t31, r1, r2\n\tshr.s!\t5, r1, r3\n\tjump.eq\t@.BB0_14\n\tadd\tr0, r0, r4\n.BB0_13:\n\tshl.s\t5, r4, r5\n\tptr.add\tr7, r5, r6\n\tld\tr6, r6\n\tadd\t128, r5, r5\n\tst.1\tr5, r6\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_13\n.BB0_14:\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB0_16\n\tshl.s\t5, r3, r3\n\tptr.add\tr7, r3, r4\n\tshl.s\t3, r2, r2\n\tadd\t128, r3, r3\n\tld.1\tr3, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr4, r4\n\tsub\t256, r2, r2\n\tshr\tr4, r2, r4\n\tshl\tr4, r2, r2\n\tor\tr2, r5, r2\n\tst.1\tr3, r2\n.BB0_16:\n\tsub.s!\t64, r1, r1\n\tjump.lt\t@.BB0_18\n\tld.1\t128, r1\n\tsub.s!\t255, r1, r2\n\tjump.le\t@.BB0_33\n.BB0_18:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_19:\n\tsub.s!\t@CPI0_6[0], r2, r3\n\tjump.gt\t@.BB0_36\n\tsub.s!\t@CPI0_10[0], r2, r3\n\tjump.eq\t@.BB0_48\n\tsub.s!\t@CPI0_11[0], r2, r3\n\tjump.eq\t@.BB0_50\n\tsub.s!\t@CPI0_12[0], r2, r2\n\tjump.ne\t@.BB0_18\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r1, r1\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r7, r1\n\tld\tr1, r2\n\tadd\t1, r0, r1\n\tadd\tr2, r0, stack-[5]\n\tsstore\tr1, r2\n\tadd\t@CPI0_2[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_41\n\tld\tr1, r3\n\tadd\t2, r0, r1\n\tsstore\tr1, r3\n\tadd\t3, r0, r4\n\tsload\tr4, r1\n\tsub.s\t1, r0, r2\n\tsub!\tr1, r2, r2\n\tjump.eq\t@.BB0_35\n\tadd\t1, r1, r1\n\tsstore\tr4, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr2, r0, stack-[3]\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[4]\n\tadd\tr4, r0, stack-[2]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[2], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[3], r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[2], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[3], r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_28:\n\tsub.s!\t@CPI0_14[0], r2, r1\n\tjump.eq\t@.BB0_55\n\tsub.s!\t@CPI0_15[0], r2, r1\n\tjump.eq\t@.BB0_57\n\tsub.s!\t@CPI0_16[0], r2, r1\n\tjump.ne\t@.BB0_18\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n\tadd\t224, r0, r1\n\tst.1\t64, r1\n\tadd\t35, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_25[0], r0, r2\n\tst.1\t160, r2\n\tadd\t@CPI0_26[0], r0, r3\n\tst.1\t192, r3\n\tadd\t32, r0, r4\n\tst.1\t224, r4\n\tst.1\t256, r1\n\tst.1\t288, r2\n\tst.1\t320, r3\n\tst.1\t323, r0\n\tadd\t@CPI0_27[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_33:\n\tsub.s\t256, r0, r2\n\tsload\tr0, r3\n\tand\tr3, r2, r2\n\tor\tr2, r1, r1\n\tld.1\t160, r2\n\tsstore\tr0, r1\n\tadd\t1, r0, r1\n\tadd\tr2, r0, stack-[5]\n\tsstore\tr1, r2\n\tadd\t@CPI0_2[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_41\n\tld\tr1, r3\n\tadd\t2, r0, r1\n\tsstore\tr1, r3\n\tadd\t3, r0, r4\n\tsload\tr4, r1\n\tsub.s\t1, r0, r2\n\tsub!\tr1, r2, r2\n\tjump.ne\t@.BB0_66\n.BB0_35:\n\tadd\t@CPI0_23[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_24[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_36:\n\tsub.s!\t@CPI0_7[0], r2, r3\n\tjump.eq\t@.BB0_59\n\tsub.s!\t@CPI0_8[0], r2, r3\n\tjump.eq\t@.BB0_62\n\tsub.s!\t@CPI0_9[0], r2, r1\n\tjump.ne\t@.BB0_18\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n\tadd\t3, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr2, r0, stack-[5]\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[3]\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[5], r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[5], r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r2\n\tand\t@CPI0_20[0], r2, r2\n\tsload\tr1, r1\n\tjump\t@.BB0_54\n.BB0_41:\n\trevert\n.BB0_42:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n\tsload\tr0, r1\n\tand\t255, r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_44:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t132, r1, r1\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r7, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_20[0], r1, r2\n\tjump.gt\t@.BB0_18\n\tptr.add.s\t68, r7, r2\n\tld\tr2, r3\n\tadd\tr3, r0, stack-[3]\n\tptr.add.s\t36, r7, r2\n\tld\tr2, r4\n\tadd\tr4, r0, stack-[1]\n\tadd\t3, r0, r2\n\tadd\tr2, r0, stack-[5]\n\tsstore\tr2, r1\n\tadd\t1, r0, r2\n\tsstore\tr2, r4\n\tadd\t2, r0, r2\n\tsstore\tr2, r3\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr2, r0, stack-[4]\n\tadd\tr0, r0, r1\n\tptr.add\tr7, r0, stack-[2]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[5], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[4], r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[5], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tptr.add\tstack-[2], r0, r1\n\tptr.add.s\t100, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[5]\n\tadd\tr0, r0, r1\n\tadd\tstack-[4], r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_48:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n\tadd\t2, r0, r1\n\tjump\t@.BB0_9\n.BB0_50:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r1, r1\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r7, r1\n\tld\tr1, r3\n\tsub.s!\t@CPI0_20[0], r3, r1\n\tjump.gt\t@.BB0_18\n\tst.1\t0, r3\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr2, r0, stack-[5]\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[4]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[3]\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[5], r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[5], r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tadd\tstack-[4], r0, r2\n.BB0_54:\n\tst.1\t128, r2\n\tadd\tstack-[3], r0, r3\n\tst.1\t160, r3\n\tadd\tstack-[2], r0, r3\n\tst.1\t192, r3\n\tst.1\t224, r1\n\tst.1\t256, r2\n\tadd\t@CPI0_21[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_55:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n\tadd\t4, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_57:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_18\n\tadd\t3, r0, r1\n\tjump\t@.BB0_9\n.BB0_59:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r1, r1\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r7, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tjump\t@.BB0_65\n.BB0_62:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r1, r1\n\tjump.lt\t@.BB0_18\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_18\n\tptr.add.s\t4, r7, r1\n\tld\tr1, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n.BB0_65:\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n.BB0_9:\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_66:\n\tadd\t1, r1, r1\n\tsstore\tr4, r1\n\tst.1\t0, r1\n\tadd\t4, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr2, r0, stack-[3]\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[4]\n\tadd\tr4, r0, stack-[2]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[2], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t5, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[3], r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r2\n\tsstore\tr1, r2\n\tadd\tstack-[2], r0, r1\n\tsload\tr1, r1\n\tst.1\t0, r1\n\tadd\t6, r0, r1\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[3], r0, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r2\n\tsstore\tr1, r2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_4[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\n__cxa_throw:\n.func_begin1:\n\trevert\n.func_end1:\n\n__sha3:\n.func_begin2:\n\tadd\t@CPI2_0[0], r0, r3\n\tsub.s!\t@CPI2_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI2_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI2_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI2_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB2_2\n\tld\tr1, r1\n\tret\n.BB2_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\n__staticcall:\n.func_begin3:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB3_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI2_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 8589934560\nCPI0_2:\n\t.cell 54919857843691310904240101001871775513466943666296306094405906504622902841650\nCPI0_3:\n\t.cell 904625751086426111047927909714404454142933102791518401696464687643217625088\nCPI0_4:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_5:\n\t.cell 2181414761\nCPI0_6:\n\t.cell 3047905499\nCPI0_7:\n\t.cell 3047905500\nCPI0_8:\n\t.cell 3056820748\nCPI0_9:\n\t.cell 4272920204\nCPI0_10:\n\t.cell 2181414762\nCPI0_11:\n\t.cell 2591017205\nCPI0_12:\n\t.cell 2826576078\nCPI0_13:\n\t.cell 1425886543\nCPI0_14:\n\t.cell 1425886544\nCPI0_15:\n\t.cell 1720323842\nCPI0_16:\n\t.cell 1921311766\nCPI0_17:\n\t.cell 826074471\nCPI0_18:\n\t.cell 1252131103\nCPI0_19:\n\t.cell 1355963341\nCPI0_20:\n\t.cell 1208925819614629174706175\nCPI0_21:\n\t.cell 12676506004643477256401854660608\nCPI0_22:\n\t.cell 2535301202817642044428229017600\nCPI0_23:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_24:\n\t.cell 2852213850513516153367582212096\nCPI0_25:\n\t.cell 53458043733101429033983546944811314525375823181425636319328733791469637169710\nCPI0_26:\n\t.cell 52212842999871488704405067398087110979966841356340410233199542407014377324544\nCPI0_27:\n\t.cell 10141204805957905884484565204992\nCPI2_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","methodIdentifiers":{"decimals()":"313ce567","description()":"7284e416","getAnswer(uint256)":"b5ab58dc","getRoundData(uint80)":"9a6fc8f5","getTimestamp(uint256)":"b633620c","latestAnswer()":"50d25bcd","latestRound()":"668a0f02","latestRoundData()":"feaf968c","latestTimestamp()":"8205bf6a","updateAnswer(int256)":"a87a20ce","updateRoundData(uint80,int256,uint256,uint256)":"4aa2011f","version()":"54fd4d50"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.580a8fe5\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"_answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startedAt\",\"type\":\"uint256\"}],\"name\":\"updateRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"MockV3Aggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Based on the FluxAggregator contractUse this contract when you need to test other contract's ability to read data from an aggregator contract, but how the aggregator got its answer is unimportant\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/mocks/MockV3Aggregator.sol\":\"MockV3Aggregator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://644cff84052e1e82b5bb502b2a46e8f142a62b0db4cd9b38200798ba8373c6f7\",\"dweb:/ipfs/QmTa99QHrJBn3SXDizquPBUiTxVCNKQrHgaWJhuds5Sce2\"]},\"test/mocks/MockV3Aggregator.sol\":{\"keccak256\":\"0x4795949d594ed6bfc89da34cef3c56f6c50c7440c06ef92a5051115acd345b3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c235c58157ca00ff1ab29299f4e3d0d337bcc9200c9c26b41da3a78522b6220\",\"dweb:/ipfs/QmSYBtpQbhQHXGMgDzoNTYrLthUfpNSQQvdFF8wrAho7jj\"]}},\"version\":1}","solc_version":"0.8.19","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 0:\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\", 36:\"test/mocks/MockV3Aggregator.sol\"\nobject \"MockV3Aggregator_48609\" {\n    code {\n        {\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"MockV3Aggregator_48609\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ 0x24)\n            }\n            let _2 := 64\n            mstore(_2, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), _2)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            let value := mload(_1)\n            let _3 := and(value, 0xff)\n            if iszero(eq(value, _3))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            let value_1 := mload(add(_1, 32))\n            /// @src -1:-1:-1\n            let _4 := 0\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            sstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ or(and(sload(/** @src -1:-1:-1 */ _4), /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ not(255)), _3))\n            sstore(1, value_1)\n            sstore(/** @src 36:1031:1064  \"latestTimestamp = block.timestamp\" */ 0x02, /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            let _5 := sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03)\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            if eq(_5, not(0))\n            {\n                mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ 0x24)\n            }\n            let ret := add(_5, 1)\n            sstore(/** @src 36:1074:1087  \"latestRound++\" */ 0x03, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ ret)\n            mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ ret)\n            mstore(32, /** @src 36:1097:1106  \"getAnswer\" */ 0x04)\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            sstore(keccak256(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _2), value_1)\n            mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            mstore(32, /** @src 36:1139:1151  \"getTimestamp\" */ 0x05)\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            sstore(keccak256(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            mstore(32, /** @src 36:1192:1204  \"getStartedAt\" */ 0x06)\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            sstore(keccak256(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n            let _6 := mload(_2)\n            let _7 := datasize(\"MockV3Aggregator_48609_deployed\")\n            codecopy(_6, dataoffset(\"MockV3Aggregator_48609_deployed\"), _7)\n            return(_6, _7)\n        }\n    }\n    /// @use-src 36:\"test/mocks/MockV3Aggregator.sol\"\n    object \"MockV3Aggregator_48609_deployed\" {\n        code {\n            {\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x313ce567 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        mstore(_1, and(sload(_4), 0xff))\n                        return(_1, 32)\n                    }\n                    case 0x4aa2011f {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 128) { revert(_4, _4) }\n                        let value0 := abi_decode_uint80()\n                        let value := calldataload(36)\n                        let value_1 := calldataload(68)\n                        let _5 := and(/** @src 36:1363:1385  \"latestRound = _roundId\" */ value0, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ 0xffffffffffffffffffff)\n                        sstore(/** @src 36:1363:1385  \"latestRound = _roundId\" */ 0x03, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _5)\n                        sstore(1, value)\n                        sstore(/** @src 36:1427:1455  \"latestTimestamp = _timestamp\" */ 0x02, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ value_1)\n                        mstore(_4, _5)\n                        mstore(32, _3)\n                        sstore(keccak256(_4, _2), value)\n                        mstore(_4, sload(/** @src 36:1363:1385  \"latestRound = _roundId\" */ 0x03))\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        mstore(32, /** @src 36:1507:1519  \"getTimestamp\" */ 0x05)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        sstore(keccak256(_4, _2), value_1)\n                        mstore(_4, sload(/** @src 36:1363:1385  \"latestRound = _roundId\" */ 0x03))\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        mstore(32, /** @src 36:1555:1567  \"getStartedAt\" */ 0x06)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        sstore(keccak256(_4, _2), calldataload(100))\n                        return(_4, _4)\n                    }\n                    case 0x50d25bcd {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _6 := sload(/** @src 36:553:579  \"int256 public latestAnswer\" */ 1)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        let memPos := mload(_2)\n                        mstore(memPos, _6)\n                        return(memPos, 32)\n                    }\n                    case 0x54fd4d50 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, _3)\n                        return(memPos_1, 32)\n                    }\n                    case 0x668a0f02 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _7 := sload(/** @src 36:621:647  \"uint256 public latestRound\" */ 3)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, _7)\n                        return(memPos_2, 32)\n                    }\n                    case 0x7284e416 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPtr := mload(_2)\n                        let newFreePtr := add(memPtr, 96)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        mstore(_2, newFreePtr)\n                        mstore(memPtr, 35)\n                        let _8 := 0x20\n                        mstore(add(memPtr, _8), \"v0.6/test/mock/MockV3Aggregator.\")\n                        mstore(add(memPtr, _2), \"sol\")\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, _8)\n                        let length := mload(memPtr)\n                        mstore(add(memPos_3, _8), length)\n                        let i := _4\n                        for { } lt(i, length) { i := add(i, _8) }\n                        {\n                            mstore(add(add(memPos_3, i), _2), mload(add(add(memPtr, i), _8)))\n                        }\n                        mstore(add(add(memPos_3, length), _2), _4)\n                        return(memPos_3, add(sub(add(memPos_3, and(add(length, 31), not(31))), memPos_3), _2))\n                    }\n                    case 0x8205bf6a {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _9 := sload(/** @src 36:585:615  \"uint256 public latestTimestamp\" */ 2)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, _9)\n                        return(memPos_4, 32)\n                    }\n                    case 0x9a6fc8f5 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value0_1 := abi_decode_uint80()\n                        mstore(_4, and(value0_1, 0xffffffffffffffffffff))\n                        mstore(32, _3)\n                        let _10 := sload(keccak256(_4, _2))\n                        mstore(32, /** @src 36:1838:1850  \"getStartedAt\" */ 0x06)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        let _11 := sload(keccak256(_4, _2))\n                        mstore(32, /** @src 36:1862:1874  \"getTimestamp\" */ 0x05)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        let _12 := sload(keccak256(_4, _2))\n                        let memPos_5 := mload(_2)\n                        return(memPos_5, sub(abi_encode_uint80_int256_uint256_uint256_uint80(memPos_5, value0_1, _10, _11, _12, value0_1), memPos_5))\n                    }\n                    case 0xa87a20ce {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let value_2 := calldataload(_3)\n                        sstore(1, value_2)\n                        sstore(/** @src 36:1031:1064  \"latestTimestamp = block.timestamp\" */ 0x02, /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        let _13 := sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        if eq(_13, not(0))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(_4, 0x24)\n                        }\n                        let ret := add(_13, 1)\n                        sstore(/** @src 36:1074:1087  \"latestRound++\" */ 0x03, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ ret)\n                        mstore(_4, ret)\n                        mstore(32, _3)\n                        sstore(keccak256(_4, _2), value_2)\n                        mstore(_4, sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        mstore(32, /** @src 36:1139:1151  \"getTimestamp\" */ 0x05)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        sstore(keccak256(_4, _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        mstore(_4, sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        mstore(32, /** @src 36:1192:1204  \"getStartedAt\" */ 0x06)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        sstore(keccak256(_4, _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        return(_4, _4)\n                    }\n                    case 0xb5ab58dc {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        mstore(_4, calldataload(_3))\n                        mstore(32, _3)\n                        let _14 := sload(keccak256(_4, _2))\n                        let memPos_6 := mload(_2)\n                        mstore(memPos_6, _14)\n                        return(memPos_6, 32)\n                    }\n                    case 0xb633620c {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        mstore(_4, calldataload(_3))\n                        mstore(32, /** @src 36:703:750  \"mapping(uint256 => uint256) public getTimestamp\" */ 5)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        let _15 := sload(keccak256(_4, _2))\n                        let memPos_7 := mload(_2)\n                        mstore(memPos_7, _15)\n                        return(memPos_7, 32)\n                    }\n                    case 0xfeaf968c {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _16 := sload(/** @src 36:2117:2128  \"latestRound\" */ 0x03)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        let converted := and(_16, 0xffffffffffffffffffff)\n                        mstore(_4, _16)\n                        mstore(0x20, _3)\n                        let _17 := sload(keccak256(_4, _2))\n                        mstore(0x20, /** @src 36:2179:2191  \"getStartedAt\" */ 0x06)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        let _18 := sload(keccak256(_4, _2))\n                        mstore(0x20, /** @src 36:2218:2230  \"getTimestamp\" */ 0x05)\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        let _19 := sload(keccak256(_4, _2))\n                        let memPos_8 := mload(_2)\n                        return(memPos_8, sub(abi_encode_uint80_int256_uint256_uint256_uint80(memPos_8, converted, _17, _18, _19, converted), memPos_8))\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_uint80() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, 0xffffffffffffffffffff))) { revert(0, 0) }\n            }\n            function abi_encode_uint80_int256_uint256_uint256_uint80(headStart, value0, value1, value2, value3, value4) -> tail\n            {\n                tail := add(headStart, 160)\n                let _1 := 0xffffffffffffffffffff\n                mstore(headStart, and(value0, _1))\n                mstore(add(headStart, 32), value1)\n                mstore(add(headStart, 64), value2)\n                mstore(add(headStart, 96), value3)\n                mstore(add(headStart, 128), and(value4, _1))\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000813000a\"\n    }\n}\n","hash":"010000919b8eecd8197a23f2f31510aa079fac2d23b958f60d7795a898ccda3f","factoryDependencies":{},"id":36}