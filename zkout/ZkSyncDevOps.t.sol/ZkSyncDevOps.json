{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"ZkSyncDevOps.t.sol:ZkSyncDevOps\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[14]\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@calldatasize]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_10\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_259\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_2[0], r1, r2\n\tjump.le\t@.BB0_12\n\tsub.s!\t@CPI0_3[0], r1, r2\n\tjump.le\t@.BB0_19\n\tsub.s!\t@CPI0_4[0], r1, r2\n\tjump.le\t@.BB0_33\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.eq\t@.BB0_65\n\tsub.s!\t@CPI0_6[0], r1, r2\n\tjump.eq\t@.BB0_68\n\tsub.s!\t@CPI0_7[0], r1, r1\n\tjump.ne\t@.BB0_259\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t30, r0, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_26[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t12, r0, r1\n\tsload\tr1, r2\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tor\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\t30, r0, r1\n\tsload\tr1, r2\n\tand\tr2, r3, r2\n\tor\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\t324, r0, r1\n\tadd\t31, r0, r2\n\tsstore\tr2, r1\n\tadd\t300, r0, r1\n\tadd\t32, r0, r2\n\tsstore\tr2, r1\n\tadd\t260, r0, r1\n\tadd\t33, r0, r3\n\tsstore\tr3, r1\n\tst.2\t256, r2\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_12:\n\tsub.s!\t@CPI0_15[0], r1, r2\n\tjump.gt\t@.BB0_28\n\tsub.s!\t@CPI0_21[0], r1, r2\n\tjump.gt\t@.BB0_37\n\tsub.s!\t@CPI0_24[0], r1, r2\n\tjump.eq\t@.BB0_81\n\tsub.s!\t@CPI0_25[0], r1, r1\n\tjump.ne\t@.BB0_259\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t22, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB0_18\n\tadd\t160, r0, r4\n\tadd\t@CPI0_65[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_137:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_38[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_137\n\tjump\t@.BB0_156\n.BB0_19:\n\tsub.s!\t@CPI0_10[0], r1, r2\n\tjump.gt\t@.BB0_42\n\tsub.s!\t@CPI0_13[0], r1, r2\n\tjump.eq\t@.BB0_84\n\tsub.s!\t@CPI0_14[0], r1, r1\n\tjump.ne\t@.BB0_259\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t28, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[6]\n\tsub.s!\t@CPI0_31[0], r2, r2\n\tjump.gt\t@.BB0_283\n\tadd\tstack-[6], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_43[0], r2, r2\n\tsub.s!\t@CPI0_44[0], r2, r3\n\tjump.gt\t@.BB0_283\n\tadd\t128, r2, r11\n\tst.1\t64, r11\n\tadd\tstack-[6], r0, r3\n\tst.1\t128, r3\n\tst.1\t0, r1\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_172\n.BB0_26:\n\tadd\t32, r0, r1\n\tst.1.inc\tr11, r1, r1\n\tld.1\t128, r2\n\tst.1\tr1, r2\n\tadd\t64, r11, r3\n\tshl.s\t5, r2, r1\n\tadd\tr1, r3, r1\n\tsub!\tr2, r0, r4\n\tjump.ne\t@.BB0_261\n.BB0_27:\n\tsub\tr1, r11, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r11, r3\n\tadd.ge\tr2, r0, r11\n\tshl.s\t64, r11, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_28:\n\tsub.s!\t@CPI0_16[0], r1, r2\n\tjump.gt\t@.BB0_61\n\tsub.s!\t@CPI0_19[0], r1, r2\n\tjump.eq\t@.BB0_102\n\tsub.s!\t@CPI0_20[0], r1, r1\n\tjump.ne\t@.BB0_259\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tnear_call\tr0, @fun_isOnZkSyncChainId, @DEFAULT_UNWIND\n\tjump\t@.BB0_83\n.BB0_33:\n\tsub.s!\t@CPI0_8[0], r1, r2\n\tjump.eq\t@.BB0_105\n\tsub.s!\t@CPI0_9[0], r1, r1\n\tjump.ne\t@.BB0_259\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tnear_call\tr0, @fun_isOnZkSyncPrecompiles, @DEFAULT_UNWIND\n\tjump\t@.BB0_83\n.BB0_37:\n\tsub.s!\t@CPI0_22[0], r1, r2\n\tjump.eq\t@.BB0_116\n\tsub.s!\t@CPI0_23[0], r1, r1\n\tjump.ne\t@.BB0_259\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t24, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_138\n\tjump\t@.BB0_18\n.BB0_42:\n\tsub.s!\t@CPI0_11[0], r1, r2\n\tjump.eq\t@.BB0_123\n\tsub.s!\t@CPI0_12[0], r1, r1\n\tjump.ne\t@.BB0_259\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t25, r0, r4\n\tsload\tr4, r5\n\tsub.s!\t@CPI0_31[0], r5, r2\n\tjump.gt\t@.BB0_283\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_43[0], r2, r2\n\tsub.s!\t@CPI0_44[0], r2, r3\n\tjump.gt\t@.BB0_283\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r4\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_101\n\tadd\t128, r0, r6\n\tadd\t@CPI0_45[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[8]\n.BB0_49:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_260\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_55\n\tadd\tr3, r0, stack-[9]\n\tadd\tr4, r0, stack-[10]\n\tadd\tr9, r0, stack-[13]\n\tadd\tr8, r0, stack-[11]\n\tadd\tr6, r0, stack-[12]\n\tadd\tr7, r0, stack-[14]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_46[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_259\n\tadd\tstack-[10], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[8], r0, r5\n\tadd\tstack-[12], r0, r6\n\tadd\tstack-[11], r0, r8\n\tjump.eq\t@.BB0_56\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r7\n\tadd\tstack-[13], r0, r9\n\tadd\tstack-[9], r0, r11\n.BB0_54:\n\tadd\tr1, r11, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_54\n\tjump\t@.BB0_57\n.BB0_55:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_57\n.BB0_56:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r7\n\tadd\tstack-[13], r0, r9\n.BB0_57:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_31[0], r1, r3\n\tjump.gt\t@.BB0_283\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_283\n\tadd\t32, r6, r6\n\tst.1\t64, r1\n\tst.1\tr6, r9\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_49\n\tjump\t@.BB0_100\n.BB0_61:\n\tsub.s!\t@CPI0_17[0], r1, r2\n\tjump.eq\t@.BB0_130\n\tsub.s!\t@CPI0_18[0], r1, r1\n\tjump.ne\t@.BB0_259\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tnear_call\tr0, @fun_is_foundry_zksync, @DEFAULT_UNWIND\n\tjump\t@.BB0_83\n.BB0_65:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t21, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_141\n\tjump\t@.BB0_18\n.BB0_68:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\tr4, r0, stack-[14]\n\tnear_call\tr0, @fun_is_foundry_zksync, @DEFAULT_UNWIND\n\tld.1\t64, r6\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_144\n\tadd\t100, r6, r1\n\tadd\t@CPI0_32[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t68, r6, r1\n\tadd\t14, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_33[0], r0, r1\n\tst.1\tr6, r1\n\tadd\t4, r6, r1\n\tadd\t64, r0, r2\n\tst.1\tr1, r2\n\tadd\t164, r6, r1\n\tadd\t@CPI0_34[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t132, r6, r1\n\tadd\t3, r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r6, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r6, r3\n\tadd.lt\tr6, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_35[0], r1, r1\n\tadd\t@CPI0_36[0], r0, r2\n\tadd\tr6, r0, stack-[14]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_73\n\tadd\tr0, r0, r7\n.BB0_72:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_72\n.BB0_73:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_75\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_75:\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_161\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tr2, r10, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_31[0], r1, r4\n\tjump.gt\t@.BB0_283\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_283\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_259\n\tld.1\tr10, r1\n\tsub!\tr1, r0, r2\n\tadd\t0, r0, r2\n\tadd.ne\t1, r0, r2\n\tsub!\tr1, r2, r2\n\tjump.ne\t@.BB0_259\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_129\n\tjump\t@.BB0_152\n.BB0_81:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tnear_call\tr0, @fun_isZkSyncChain, @DEFAULT_UNWIND\n.BB0_83:\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_39[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_84:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t26, r0, r4\n\tsload\tr4, r5\n\tsub.s!\t@CPI0_31[0], r5, r2\n\tjump.gt\t@.BB0_283\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_43[0], r2, r2\n\tsub.s!\t@CPI0_44[0], r2, r3\n\tjump.gt\t@.BB0_283\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r4\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_101\n\tadd\t128, r0, r6\n\tadd\t@CPI0_59[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[8]\n.BB0_89:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_260\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_95\n\tadd\tr3, r0, stack-[9]\n\tadd\tr4, r0, stack-[10]\n\tadd\tr9, r0, stack-[13]\n\tadd\tr8, r0, stack-[11]\n\tadd\tr6, r0, stack-[12]\n\tadd\tr7, r0, stack-[14]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_46[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_259\n\tadd\tstack-[10], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[8], r0, r5\n\tadd\tstack-[12], r0, r6\n\tadd\tstack-[11], r0, r8\n\tjump.eq\t@.BB0_96\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r7\n\tadd\tstack-[13], r0, r9\n\tadd\tstack-[9], r0, r11\n.BB0_94:\n\tadd\tr1, r11, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_94\n\tjump\t@.BB0_97\n.BB0_95:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_97\n.BB0_96:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r7\n\tadd\tstack-[13], r0, r9\n.BB0_97:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_31[0], r1, r3\n\tjump.gt\t@.BB0_283\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_283\n\tadd\t32, r6, r6\n\tst.1\t64, r1\n\tst.1\tr6, r9\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_89\n.BB0_100:\n\tld.1\t64, r1\n.BB0_101:\n\tadd\tr1, r0, stack-[14]\n\tadd\t128, r0, r2\n\tnear_call\tr0, @abi_encode_array_string_dyn, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r4\n\tjump\t@.BB0_158\n.BB0_102:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t23, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_153\n.BB0_18:\n\tadd\t32, r0, r2\n\tjump\t@.BB0_157\n.BB0_105:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t8, r0, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tjump.ne\t@.BB0_115\n\tadd\t@CPI0_40[0], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_36[0], r0, r1\n\tst.1\t132, r1\n\tadd\t@CPI0_41[0], r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_42[0], r1, r1\n\tadd\t@CPI0_36[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_110\n\tadd\tr0, r0, r7\n.BB0_109:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_109\n.BB0_110:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_112\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_112:\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_166\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r4\n\tst.1\t64, r4\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_259\n\tld.1\t128, r1\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n.BB0_115:\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\tr4, r1\n\tshl.s\t64, r4, r1\n\tor\t@CPI0_39[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_116:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t29, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[1]\n\tsub.s!\t@CPI0_63[0], r2, r2\n\tjump.ge\t@.BB0_283\n\tadd\tstack-[1], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_43[0], r2, r2\n\tsub.s!\t@CPI0_44[0], r2, r3\n\tjump.gt\t@.BB0_283\n\tadd\t128, r2, r3\n\tst.1\t64, r3\n\tadd\tstack-[1], r0, r4\n\tst.1\t128, r4\n\tst.1\t0, r1\n\tsub!\tr4, r0, r1\n\tjump.ne\t@.BB0_200\n.BB0_120:\n\tadd\t32, r0, r1\n\tst.1.inc\tr3, r1, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[14]\n\tadd\t64, r3, r2\n\tshl.s\t5, r1, r3\n\tadd\tr3, r2, r6\n\tadd\tr1, r0, stack-[13]\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_274\n\tadd\tr6, r0, r11\n.BB0_122:\n\tadd\tstack-[14], r0, r4\n\tsub\tr11, r4, r1\n\tjump\t@.BB0_159\n.BB0_123:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_47[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_48[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_160\n\tld\tr1, r1\n\tsub.s!\tstack-[14], r1, r2\n\tjump.eq\t@.BB0_128\n\tadd\t32, r0, r2\n\tadd\tr2, r0, stack-[10]\n\tsload\tr2, r2\n\tsub!\tr1, r2, r2\n\tjump.eq\t@.BB0_128\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r1\n\tjump.ne\t@.BB0_282\n.BB0_128:\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tadd\t3, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_152\n.BB0_129:\n\tadd\t@CPI0_53[0], r0, r1\n\tst.1\t0, r1\n\tadd\t1, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_54[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_130:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_259\n\tadd\t27, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[5]\n\tsub.s!\t@CPI0_31[0], r2, r2\n\tjump.gt\t@.BB0_283\n\tadd\tstack-[5], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_43[0], r2, r2\n\tsub.s!\t@CPI0_44[0], r2, r3\n\tjump.gt\t@.BB0_283\n\tadd\t128, r2, r15\n\tst.1\t64, r15\n\tadd\tstack-[5], r0, r3\n\tst.1\t128, r3\n\tst.1\t0, r1\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_221\n.BB0_134:\n\tadd\t32, r0, r1\n\tst.1.inc\tr15, r1, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\t64, r15, r3\n\tshl.s\t5, r1, r2\n\tadd\tr2, r3, r2\n\tsub!\tr1, r0, r4\n\tjump.ne\t@.BB0_266\n.BB0_135:\n\tsub\tr2, r15, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r15, r3\n\tadd.ge\tr2, r0, r15\n\tshl.s\t64, r15, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_138:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_62[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_139:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_38[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_139\n\tjump\t@.BB0_156\n.BB0_141:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_37[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_142:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_38[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_142\n\tjump\t@.BB0_156\n.BB0_144:\n\tsub.s!\t@CPI0_27[0], r6, r1\n\tjump.gt\t@.BB0_283\n\tadd\t96, r6, r1\n\tst.1\t64, r1\n\tadd\t64, r6, r1\n\tadd\t@CPI0_28[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r6, r3\n\tadd\t@CPI0_29[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t37, r0, r1\n\tst.1\tr6, r1\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tadd\t@CPI0_30[0], r0, r4\n\tst.1\tr2, r4\n\tadd\t36, r1, r4\n\tadd\t32, r0, r5\n\tst.1\tr4, r5\n\tld.1\tr6, r4\n\tadd\t68, r1, r5\n\tst.1\tr5, r4\n\tadd\t100, r1, r5\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_148\n\tadd\tr0, r0, r6\n.BB0_147:\n\tadd\tr6, r5, r7\n\tadd\tr6, r3, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_147\n.BB0_148:\n\tadd\tr4, r5, r3\n\tst.1\tr3, r0\n\tadd\t31, r4, r3\n\tsub.s\t32, r0, r4\n\tand\tr3, r4, r3\n\tadd\t68, r3, r5\n\tst.1\tr1, r5\n\tadd\t131, r3, r3\n\tand\tr3, r4, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_31[0], r3, r5\n\tjump.gt\t@.BB0_283\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_283\n\tst.1\t64, r3\n\tcontext.gas_left\tr3\n.BB0_151:\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r2, r5\n\tadd.ge\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr4, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.ge\tr4, r0, r3\n\tshl.s\t192, r3, r2\n\tor\tr1, r2, r1\n\tadd\t@CPI0_52[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n.BB0_152:\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_153:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_61[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_154:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_38[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_154\n.BB0_156:\n\tsub.s\t96, r5, r2\n.BB0_157:\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[14]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @abi_encode_array_address_dyn, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r4\n.BB0_158:\n\tsub\tr1, r4, r1\n.BB0_159:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_160:\n\trevert\n.BB0_161:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_164\n\tadd\tr0, r0, r6\n.BB0_163:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_163\n.BB0_164:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_171\n\tjump\t@.BB0_170\n.BB0_166:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_169\n\tadd\tr0, r0, r6\n.BB0_168:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_168\n.BB0_169:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_171\n.BB0_170:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_171:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_172:\n\tsub.s!\t@CPI0_55[0], r2, r1\n\tjump.gt\t@.BB0_283\n\tadd\t@CPI0_56[0], r0, r4\n\tadd\t160, r0, stack-[12]\n\tadd\t32784, r0, stack-[5]\n\tadd\tr0, r0, stack-[11]\n.BB0_174:\n\tadd\t64, r11, r1\n\tst.1\t64, r1\n\tsload\tr4, r1\n\tand\t@CPI0_38[0], r1, r1\n\tadd\tr11, r0, stack-[14]\n\tst.1.inc\tr11, r1, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\tr4, r0, stack-[13]\n\tadd\t1, r4, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[10]\n\tadd\tr3, r0, stack-[8]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[9]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_46[0], r1, r1\n\tadd\tstack-[5], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_259\n\tld\tr1, r2\n\tadd\tstack-[8], r0, r8\n\tsub.s!\t8, r8, r1\n\tjump.lt\t@.BB0_193\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[9], r0, r7\n.BB0_177:\n\tadd\t224, r7, r3\n\tsload\tr2, r4\n\tand\t@CPI0_57[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t192, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t160, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t128, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t96, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t64, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t32, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr7, r3\n\tadd\t1, r2, r2\n\tadd\t256, r7, r7\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r8, r3\n\tjump.lt\t@.BB0_177\n\tsload\tr2, r2\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_180\n.BB0_179:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr7, r3, r7\n\tor\t1, r1, r1\n.BB0_180:\n\tadd\tstack-[13], r0, r4\n\tadd\tstack-[10], r0, r5\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_182\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_195\n.BB0_183:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_184\n.BB0_196:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_197\n.BB0_185:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_186\n.BB0_198:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_199\n.BB0_187:\n\tsub!\tr1, r8, r1\n\tjump.ge\t@.BB0_189\n.BB0_188:\n\tand\t@CPI0_57[0], r2, r1\n\tst.1.inc\tr7, r1, r7\n.BB0_189:\n\tsub\tr7, r5, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r5, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_31[0], r1, r3\n\tjump.gt\t@.BB0_283\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_283\n\tst.1\t64, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\tr1, r5\n\tadd\tstack-[12], r0, r2\n\tst.1.inc\tr2, r6, r2\n\tld.1\t64, r11\n\tadd\tstack-[11], r0, r3\n\tadd\t1, r3, r3\n\tsub.s!\tstack-[6], r3, r1\n\tjump.ge\t@.BB0_295\n\tadd\tr3, r0, stack-[11]\n\tadd\tr2, r0, stack-[12]\n\tadd\t2, r4, r4\n\tsub.s!\t@CPI0_58[0], r11, r1\n\tjump.le\t@.BB0_174\n\tjump\t@.BB0_283\n.BB0_182:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_183\n.BB0_195:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_196\n.BB0_184:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_185\n.BB0_197:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_198\n.BB0_186:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_187\n.BB0_199:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r1\n\tjump.lt\t@.BB0_188\n\tjump\t@.BB0_189\n.BB0_193:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[9], r0, r7\n\tsload\tr2, r2\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_179\n\tjump\t@.BB0_180\n.BB0_200:\n\tadd\tr3, r0, stack-[14]\n\tsub.s!\t@CPI0_55[0], r2, r1\n\tjump.gt\t@.BB0_283\n\tadd\t@CPI0_64[0], r0, stack-[5]\n\tadd\t160, r0, stack-[4]\n\tadd\tr0, r0, stack-[3]\n.BB0_202:\n\tadd\tstack-[14], r0, r2\n\tadd\t64, r2, r1\n\tst.1\t64, r1\n\tadd\tstack-[5], r0, r3\n\tsload\tr3, r1\n\tand\t@CPI0_38[0], r1, r1\n\tst.1.inc\tr2, r1, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\t1, r3, r1\n\tsload\tr1, r5\n\tsub.s!\t@CPI0_31[0], r5, r2\n\tjump.gt\t@.BB0_283\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_43[0], r2, r2\n\tld.1\t64, r3\n\tadd\tr3, r2, r2\n\tadd\tr3, r0, stack-[6]\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t@CPI0_31[0], r2, r4\n\tjump.gt\t@.BB0_283\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_283\n\tst.1\t64, r2\n\tadd\tr5, r0, stack-[7]\n\tadd\tstack-[6], r0, r2\n\tst.1\tr2, r5\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_46[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_259\n\tadd\tstack-[7], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_219\n\tld\tr1, r6\n\tadd\tr0, r0, r7\n\tadd\tstack-[6], r0, r8\n.BB0_208:\n\tsload\tr6, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\tsub!\tr2, r3, r3\n\tjump.ne\t@.BB0_260\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_214\n\tadd\tr3, r0, stack-[8]\n\tadd\tr4, r0, stack-[9]\n\tadd\tr9, r0, stack-[10]\n\tadd\tr8, r0, stack-[11]\n\tadd\tr7, r0, stack-[12]\n\tadd\tr6, r0, stack-[13]\n\tst.1\t0, r6\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_46[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_259\n\tadd\tstack-[9], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[7], r0, r5\n\tadd\tstack-[12], r0, r7\n\tadd\tstack-[11], r0, r8\n\tjump.eq\t@.BB0_215\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r6\n\tadd\tstack-[10], r0, r9\n\tadd\tstack-[8], r0, r11\n.BB0_213:\n\tadd\tr1, r11, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_213\n\tjump\t@.BB0_216\n.BB0_214:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_216\n.BB0_215:\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r6\n\tadd\tstack-[10], r0, r9\n.BB0_216:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_31[0], r1, r3\n\tjump.gt\t@.BB0_283\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_283\n\tadd\t32, r8, r8\n\tst.1\t64, r1\n\tst.1\tr8, r9\n\tadd\t1, r6, r6\n\tadd\t1, r7, r7\n\tsub!\tr7, r5, r1\n\tjump.lt\t@.BB0_208\n.BB0_219:\n\tadd\tstack-[2], r0, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[14], r0, r1\n\tadd\tstack-[4], r0, r2\n\tst.1.inc\tr2, r1, r2\n\tadd\tr2, r0, stack-[4]\n\tld.1\t64, r3\n\tadd\tstack-[3], r0, r2\n\tadd\t1, r2, r2\n\tadd\tr2, r0, stack-[3]\n\tsub.s!\tstack-[1], r2, r1\n\tjump.ge\t@.BB0_297\n\tadd\tstack-[5], r0, r1\n\tadd\t2, r1, stack-[5]\n\tadd\tr3, r0, stack-[14]\n\tsub.s!\t@CPI0_58[0], r3, r1\n\tjump.le\t@.BB0_202\n\tjump\t@.BB0_283\n.BB0_221:\n\tsub.s!\t@CPI0_55[0], r2, r1\n\tjump.gt\t@.BB0_283\n\tadd\t@CPI0_60[0], r0, r5\n\tadd\t160, r0, stack-[12]\n\tadd\tr0, r0, stack-[11]\n.BB0_223:\n\tadd\t64, r15, r6\n\tst.1\t64, r6\n\tsload\tr5, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_260\n\tst.1\tr6, r4\n\tadd\t96, r15, r3\n\tsub!\tr2, r0, r2\n\tadd\tr15, r0, stack-[14]\n\tadd\tr5, r0, stack-[13]\n\tjump.eq\t@.BB0_229\n\tadd\tr3, r0, stack-[8]\n\tadd\tr4, r0, stack-[9]\n\tadd\tr6, r0, stack-[10]\n\tst.1\t0, r5\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_46[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_259\n\tadd\tstack-[9], r0, r7\n\tsub!\tr7, r0, r2\n\tjump.eq\t@.BB0_230\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r15\n\tadd\tstack-[13], r0, r5\n\tadd\tstack-[10], r0, r6\n\tadd\tstack-[8], r0, r8\n.BB0_228:\n\tadd\tr1, r8, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r7, r3\n\tjump.lt\t@.BB0_228\n\tjump\t@.BB0_231\n.BB0_229:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_231\n.BB0_230:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r15\n\tadd\tstack-[13], r0, r5\n\tadd\tstack-[10], r0, r6\n.BB0_231:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, stack-[10]\n\tand\tstack-[10], r1, r2\n\tadd\tr2, r6, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_31[0], r1, r3\n\tjump.gt\t@.BB0_283\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_283\n\tst.1\t64, r1\n\tst.1.inc\tr15, r6, r1\n\tadd\tr1, r0, stack-[6]\n\tadd\t1, r5, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\tr3, r0, stack-[7]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[8]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_46[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_259\n\tld\tr1, r2\n\tadd\tstack-[7], r0, r8\n\tsub.s!\t8, r8, r1\n\tjump.lt\t@.BB0_252\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[8], r0, r7\n.BB0_236:\n\tadd\t224, r7, r3\n\tsload\tr2, r4\n\tand\t@CPI0_57[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t192, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t160, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t128, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t96, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t64, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_57[0], r3, r3\n\tadd\t32, r7, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr7, r3\n\tadd\t1, r2, r2\n\tadd\t256, r7, r7\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r8, r3\n\tjump.lt\t@.BB0_236\n\tsload\tr2, r2\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_239\n.BB0_238:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr7, r3, r7\n\tor\t1, r1, r1\n.BB0_239:\n\tadd\tstack-[13], r0, r5\n\tadd\tstack-[9], r0, r4\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_241\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_254\n.BB0_242:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_243\n.BB0_255:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_256\n.BB0_244:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_245\n.BB0_257:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_258\n.BB0_246:\n\tsub!\tr1, r8, r1\n\tjump.ge\t@.BB0_248\n.BB0_247:\n\tand\t@CPI0_57[0], r2, r1\n\tst.1.inc\tr7, r1, r7\n.BB0_248:\n\tsub\tr7, r4, r1\n\tadd\t31, r1, r1\n\tand\tstack-[10], r1, r2\n\tadd\tr2, r4, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_31[0], r1, r3\n\tjump.gt\t@.BB0_283\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_283\n\tst.1\t64, r1\n\tadd\tstack-[6], r0, r1\n\tst.1\tr1, r4\n\tadd\tstack-[12], r0, r1\n\tst.1.inc\tr1, r6, r1\n\tadd\tr1, r0, stack-[12]\n\tld.1\t64, r15\n\tadd\tstack-[11], r0, r2\n\tadd\t1, r2, r2\n\tadd\tr2, r0, stack-[11]\n\tsub.s!\tstack-[5], r2, r1\n\tjump.ge\t@.BB0_296\n\tadd\t2, r5, r5\n\tsub.s!\t@CPI0_58[0], r15, r1\n\tjump.le\t@.BB0_223\n\tjump\t@.BB0_283\n.BB0_241:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_242\n.BB0_254:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_255\n.BB0_243:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_244\n.BB0_256:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_257\n.BB0_245:\n\tsub!\tr1, r8, r3\n\tjump.ge\t@.BB0_246\n.BB0_258:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_57[0], r3, r3\n\tst.1.inc\tr7, r3, r7\n\tadd\t1, r1, r1\n\tsub!\tr1, r8, r1\n\tjump.lt\t@.BB0_247\n\tjump\t@.BB0_248\n.BB0_252:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[8], r0, r7\n\tsload\tr2, r2\n\tsub!\tr1, r8, r3\n\tjump.lt\t@.BB0_238\n\tjump\t@.BB0_239\n.BB0_259:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_260:\n\tadd\t@CPI0_53[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_54[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_261:\n\tadd\t128, r0, r4\n\tadd\t64, r0, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_263\n.BB0_262:\n\tadd\t1, r6, r6\n\tsub!\tr6, r2, r7\n\tjump.ge\t@.BB0_27\n.BB0_263:\n\tsub\tr1, r11, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr3, r7, r3\n\tadd\t32, r4, r4\n\tld.1\tr4, r7\n\tld.1.inc\tr7, r7, r8\n\tand\t@CPI0_38[0], r7, r7\n\tst.1.inc\tr1, r7, r9\n\tld.1\tr8, r7\n\tst.1\tr9, r5\n\tadd\t64, r1, r9\n\tld.1\tr7, r8\n\tst.1\tr9, r8\n\tadd\t96, r1, r1\n\tsub!\tr8, r0, r9\n\tjump.eq\t@.BB0_262\n\tadd\tr0, r0, r9\n.BB0_265:\n\tadd\t32, r7, r7\n\tld.1\tr7, r10\n\tand\t@CPI0_57[0], r10, r10\n\tst.1.inc\tr1, r10, r1\n\tadd\t1, r9, r9\n\tsub!\tr9, r8, r10\n\tjump.lt\t@.BB0_265\n\tjump\t@.BB0_262\n.BB0_266:\n\tadd\t128, r0, r4\n\tadd\t64, r0, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_268\n.BB0_267:\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.ge\t@.BB0_135\n.BB0_268:\n\tsub\tr2, r15, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr3, r7, r3\n\tadd\t32, r4, r4\n\tld.1\tr4, r7\n\tld.1.inc\tr7, r9, r8\n\tst.1.inc\tr2, r5, r7\n\tadd\t64, r2, r12\n\tld.1.inc\tr9, r10, r11\n\tst.1\tr12, r10\n\tadd\t96, r2, r9\n\tsub!\tr10, r0, r12\n\tjump.eq\t@.BB0_271\n\tadd\tr0, r0, r12\n.BB0_270:\n\tadd\tr12, r9, r13\n\tadd\tr11, r12, r14\n\tld.1\tr14, r14\n\tst.1\tr13, r14\n\tadd\t32, r12, r12\n\tsub!\tr12, r10, r13\n\tjump.lt\t@.BB0_270\n.BB0_271:\n\tadd\tr10, r9, r11\n\tst.1\tr11, r0\n\tadd\t31, r10, r10\n\tsub.s\t32, r0, r11\n\tand\tr10, r11, r10\n\tadd\tr10, r9, r9\n\tld.1\tr8, r8\n\tsub\tr9, r2, r2\n\tst.1\tr7, r2\n\tld.1\tr8, r7\n\tst.1.inc\tr9, r7, r2\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB0_267\n\tadd\tr0, r0, r9\n.BB0_273:\n\tadd\t32, r8, r8\n\tld.1\tr8, r10\n\tand\t@CPI0_57[0], r10, r10\n\tst.1.inc\tr2, r10, r2\n\tadd\t1, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB0_273\n\tjump\t@.BB0_267\n.BB0_274:\n\tadd\t128, r0, r3\n\tadd\t64, r0, r4\n\tadd\tr0, r0, r5\n\tjump\t@.BB0_276\n.BB0_275:\n\tadd\t1, r5, r5\n\tsub.s!\tstack-[13], r5, r1\n\tadd\tr11, r0, r6\n\tjump.ge\t@.BB0_122\n.BB0_276:\n\tsub.s\tstack-[14], r6, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr2, r7, r2\n\tadd\t32, r3, r3\n\tld.1\tr3, r7\n\tld.1.inc\tr7, r7, r8\n\tand\t@CPI0_38[0], r7, r7\n\tst.1.inc\tr6, r7, r9\n\tld.1\tr8, r7\n\tst.1\tr9, r4\n\tadd\t64, r6, r9\n\tld.1\tr7, r8\n\tst.1\tr9, r8\n\tadd\t96, r6, r9\n\tshl.s\t5, r8, r10\n\tadd\tr10, r9, r11\n\tsub!\tr8, r0, r10\n\tjump.eq\t@.BB0_275\n\tadd\tr0, r0, r10\n\tjump\t@.BB0_279\n.BB0_278:\n\tadd\t31, r12, r1\n\tsub.s\t32, r0, r13\n\tand\tr1, r13, r1\n\tadd\tr12, r11, r12\n\tst.1\tr12, r0\n\tadd\tr1, r11, r11\n\tadd\t1, r10, r10\n\tsub!\tr10, r8, r1\n\tjump.ge\t@.BB0_275\n.BB0_279:\n\tsub\tr11, r6, r12\n\tsub.s\t96, r12, r12\n\tst.1.inc\tr9, r12, r9\n\tadd\t32, r7, r7\n\tld.1\tr7, r12\n\tld.1.inc\tr12, r12, r13\n\tst.1.inc\tr11, r12, r11\n\tsub!\tr12, r0, r14\n\tjump.eq\t@.BB0_278\n\tadd\tr0, r0, r14\n.BB0_281:\n\tadd\tr14, r11, r15\n\tadd\tr13, r14, r1\n\tld.1\tr1, r1\n\tst.1\tr15, r1\n\tadd\t32, r14, r14\n\tsub!\tr14, r12, r1\n\tjump.lt\t@.BB0_281\n\tjump\t@.BB0_278\n.BB0_282:\n\tld.1\t64, r3\n\tsub.s!\t@CPI0_44[0], r3, r1\n\tjump.le\t@.BB0_284\n.BB0_283:\n\tadd\t@CPI0_53[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_54[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_284:\n\tadd\t128, r3, r1\n\tst.1\t64, r1\n\tadd\t96, r3, r1\n\tadd\t8, r0, r2\n\tst.1\tr1, r2\n\tadd\t64, r3, r1\n\tadd\t5, r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r3, r1\n\tadd\t4, r0, r2\n\tst.1\tr1, r2\n\tadd\t3, r0, r1\n\tst.1\tr3, r1\n\tadd\t32777, r0, stack-[12]\n\tadd\t1, r0, stack-[11]\n\tadd\tr0, r0, r5\n\tadd\tr3, r0, stack-[13]\n\tjump\t@.BB0_286\n.BB0_285:\n\tsub.s!\t3, r5, r1\n\tadd\t1, r5, r5\n\tjump.ge\t@.BB0_128\n.BB0_286:\n\tshl.s\t5, r5, r1\n\tadd\tr1, r3, r1\n\tld.1\tr1, r2\n\tcontext.gas_left\tr1\n\tand\t@CPI0_38[0], r2, r4\n\tsub.s!\t4, r4, r2\n\tjump.eq\t@.BB0_285\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_49[0], r1, r1\n\tadd\tstack-[12], r0, r2\n\tadd\tstack-[11], r0, r3\n\tadd\tr5, r0, stack-[14]\n\tadd\tr0, r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r5\n\tadd\tstack-[13], r0, r3\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB0_285\n\tld.1\t64, r4\n\tsub.s!\t@CPI0_27[0], r4, r1\n\tjump.gt\t@.BB0_283\n\tadd\t96, r4, r1\n\tst.1\t64, r1\n\tadd\t64, r4, r1\n\tadd\t@CPI0_50[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r4, r3\n\tadd\t@CPI0_51[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t38, r0, r1\n\tst.1\tr4, r1\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tadd\t@CPI0_30[0], r0, r5\n\tst.1\tr2, r5\n\tadd\t36, r1, r5\n\tadd\tstack-[10], r0, r6\n\tst.1\tr5, r6\n\tld.1\tr4, r4\n\tadd\t68, r1, r5\n\tst.1\tr5, r4\n\tadd\t100, r1, r5\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_292\n\tadd\tr0, r0, r6\n.BB0_291:\n\tadd\tr6, r5, r7\n\tadd\tr6, r3, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB0_291\n.BB0_292:\n\tadd\tr4, r5, r3\n\tst.1\tr3, r0\n\tadd\t31, r4, r3\n\tsub.s\t32, r0, r4\n\tand\tr3, r4, r3\n\tadd\t68, r3, r5\n\tst.1\tr1, r5\n\tadd\t131, r3, r3\n\tand\tr3, r4, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_31[0], r3, r5\n\tjump.gt\t@.BB0_283\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_283\n\tst.1\t64, r3\n\tcontext.gas_left\tr3\n\tjump\t@.BB0_151\n.BB0_295:\n\tjump\t@.BB0_26\n.BB0_296:\n\tjump\t@.BB0_134\n.BB0_297:\n\tjump\t@.BB0_120\n.func_end0:\n\nabi_encode_array_address_dyn:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1\tr2, r3\n\tst.1\tr4, r3\n\tadd\t64, r1, r1\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\t32, r2, r2\n\tld.1\tr2, r5\n\tand\t@CPI1_0[0], r5, r5\n\tst.1.inc\tr1, r5, r1\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tret\n.func_end1:\n\nabi_encode_array_string_dyn:\n.func_begin2:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r3\n\tld.1\tr2, r4\n\tst.1\tr3, r4\n\tadd\t64, r1, r5\n\tshl.s\t5, r4, r3\n\tadd\tr5, r3, r3\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB2_6\n\tadd\tr0, r0, r6\n\tjump\t@.BB2_2\n.BB2_5:\n\tadd\t31, r7, r8\n\tsub.s\t32, r0, r9\n\tand\tr8, r9, r8\n\tadd\tr7, r3, r7\n\tst.1\tr7, r0\n\tadd\tr8, r3, r3\n\tadd\t1, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.ge\t@.BB2_6\n.BB2_2:\n\tsub\tr3, r1, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr5, r7, r5\n\tadd\t32, r2, r2\n\tld.1\tr2, r7\n\tld.1.inc\tr7, r7, r8\n\tst.1.inc\tr3, r7, r3\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB2_5\n\tadd\tr0, r0, r9\n.BB2_4:\n\tadd\tr9, r3, r10\n\tadd\tr8, r9, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB2_4\n\tjump\t@.BB2_5\n.BB2_6:\n\tadd\tr3, r0, r1\n\tret\n.func_end2:\n\nfinalize_allocation:\n.func_begin3:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI3_0[0], r1, r3\n\tjump.gt\t@.BB3_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB3_2\n\tst.1\t64, r1\n\tret\n.BB3_2:\n\tadd\t@CPI3_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI3_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\nfun_is_foundry_zksync:\n.func_begin4:\n\tnop\tstack+=[5]\n\tld.1\t64, r1\n\tsub.s!\t@CPI4_0[0], r1, r2\n\tjump.ge\t@.BB4_1\n\tadd\t96, r1, r2\n\tst.1\t64, r2\n\tadd\t2, r0, r2\n\tst.1.inc\tr1, r2, r3\n\tadd\t64, r1, r2\n\tadd\t96, r0, r4\n\tst.1\tr2, r4\n\tst.1\tr3, r4\n\tld.1\t64, r4\n\tsub.s!\t@CPI4_1[0], r4, r5\n\tjump.gt\t@.BB4_1\n\tadd\t64, r4, r5\n\tst.1\t64, r5\n\tadd\t32, r4, r5\n\tadd\t@CPI4_2[0], r0, r6\n\tst.1\tr5, r6\n\tadd\t5, r0, r5\n\tst.1\tr4, r5\n\tld.1\tr1, r5\n\tsub!\tr5, r0, r5\n\tjump.eq\t@.BB4_5\n\tst.1\tr3, r4\n\tld.1\tr1, r3\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB4_5\n\tld.1\t64, r3\n\tsub.s!\t@CPI4_1[0], r3, r4\n\tjump.gt\t@.BB4_1\n\tadd\t64, r3, r4\n\tst.1\t64, r4\n\tadd\t32, r3, r4\n\tadd\t@CPI4_3[0], r0, r5\n\tst.1\tr4, r5\n\tadd\t9, r0, r4\n\tst.1\tr3, r4\n\tld.1\tr1, r4\n\tsub.s!\t2, r4, r4\n\tjump.lt\t@.BB4_5\n\tst.1\tr2, r3\n\tld.1\tr1, r2\n\tsub.s!\t2, r2, r2\n\tjump.lt\t@.BB4_5\n\tld.1\t64, r11\n\tadd\t@CPI4_4[0], r0, r2\n\tst.1\tr11, r2\n\tadd\t4, r11, r2\n\tadd\t32, r0, r3\n\tadd\tr3, r0, stack-[5]\n\tst.1\tr2, r3\n\tld.1\tr1, r2\n\tadd\t36, r11, r3\n\tst.1\tr3, r2\n\tadd\t68, r11, r3\n\tshl.s\t5, r2, r4\n\tadd\tr4, r3, r5\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB4_16\n\tadd\tr0, r0, r4\n\tjump\t@.BB4_12\n.BB4_15:\n\tadd\t31, r6, r7\n\tsub.s\t32, r0, r8\n\tand\tr7, r8, r7\n\tadd\tr6, r5, r6\n\tst.1\tr6, r0\n\tadd\tr7, r5, r5\n\tadd\t1, r4, r4\n\tsub!\tr4, r2, r6\n\tjump.ge\t@.BB4_16\n.BB4_12:\n\tsub\tr5, r11, r6\n\tsub.s\t68, r6, r6\n\tst.1.inc\tr3, r6, r3\n\tadd\t32, r1, r1\n\tld.1\tr1, r6\n\tld.1.inc\tr6, r6, r7\n\tst.1.inc\tr5, r6, r5\n\tsub!\tr6, r0, r8\n\tjump.eq\t@.BB4_15\n\tadd\tr0, r0, r8\n.BB4_14:\n\tadd\tr8, r5, r9\n\tadd\tr7, r8, r10\n\tld.1\tr10, r10\n\tst.1\tr9, r10\n\tadd\t32, r8, r8\n\tsub!\tr8, r6, r9\n\tjump.lt\t@.BB4_14\n\tjump\t@.BB4_15\n.BB4_16:\n\tsub\tr5, r11, r1\n\tadd\t@CPI4_5[0], r0, r2\n\tsub.s!\t@CPI4_5[0], r11, r3\n\tadd\tr11, r0, stack-[4]\n\tadd\tr2, r0, r3\n\tadd.lt\tr11, r0, r3\n\tshl.s\t64, r3, r3\n\tsub.s!\t@CPI4_5[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r3, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI4_5[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tshl.s\t192, r3, r2\n\tor\tr1, r2, r1\n\tadd\t@CPI4_6[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t31, r3, r4\n\tand\t@CPI4_5[0], r3, r3\n\tshr.s\t5, r3, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_18\n\tsub!\tr5, r0, r2\n\tadd\tstack-[4], r0, r8\n\tjump.eq\t@.BB4_87\n\tadd\tr0, r0, r2\n.BB4_25:\n\tshl.s\t5, r2, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r2, r2\n\tsub!\tr2, r5, r6\n\tjump.lt\t@.BB4_25\n.BB4_87:\n\tsub!\tr4, r0, r2\n\tjump.eq\t@.BB4_27\n\tshl.s\t5, r5, r2\n\tptr.add\tr1, r2, r1\n\tadd\tr8, r2, r2\n\tshl.s\t3, r4, r4\n\tld.1\tr2, r5\n\tshl\tr5, r4, r5\n\tshr\tr5, r4, r5\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r5, r1\n\tst.1\tr2, r1\n.BB4_27:\n\tadd\t31, r3, r1\n\tand\t@CPI4_7[0], r1, r1\n\tadd\tr1, r8, r9\n\tsub!\tr9, r1, r1\n\tadd\t0, r0, r1\n\tadd.lt\t1, r0, r1\n\tsub.s!\t@CPI4_8[0], r9, r2\n\tjump.gt\t@.BB4_1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB4_1\n\tst.1\t64, r9\n\tsub.s!\t31, r3, r1\n\tjump.le\t@.BB4_30\n\tld.1\tr8, r1\n\tsub.s!\t@CPI4_8[0], r1, r2\n\tjump.gt\t@.BB4_30\n\tadd\tr3, r8, r3\n\tadd\tr1, r8, r1\n\tadd\t31, r1, r2\n\tadd\t@CPI4_9[0], r0, r4\n\tsub!\tr2, r3, r5\n\tadd\tr0, r0, r5\n\tadd.ge\tr4, r0, r5\n\tand\t@CPI4_9[0], r2, r2\n\tand\t@CPI4_9[0], r3, r6\n\tsub!\tr2, r6, r7\n\tadd.ge\tr0, r0, r4\n\txor\tr2, r6, r2\n\tsub.s!\t@CPI4_9[0], r2, r2\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r2\n\tjump.ne\t@.BB4_30\n\tld.1.inc\tr1, r1, r2\n\tsub.s!\t@CPI4_8[0], r1, r4\n\tjump.gt\t@.BB4_1\n\tadd\t31, r1, r4\n\tsub.s\t32, r0, r8\n\tand\tr4, r8, r4\n\tadd\t63, r4, r4\n\tand\tr4, r8, r4\n\tadd\tr4, r9, r4\n\tsub.s!\t@CPI4_8[0], r4, r5\n\tjump.gt\t@.BB4_1\n\tst.1\t64, r4\n\tst.1.inc\tr9, r1, r10\n\tadd\tr1, r2, r4\n\tsub!\tr4, r3, r3\n\tjump.gt\t@.BB4_30\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB4_39\n\tadd\tr0, r0, r3\n.BB4_38:\n\tadd\tr3, r10, r4\n\tadd\tr3, r2, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB4_38\n.BB4_39:\n\tadd\tr1, r10, r1\n\tst.1\tr1, r0\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tadd\t@CPI4_10[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r1, r3\n\tadd\tstack-[5], r0, r4\n\tst.1\tr3, r4\n\tld.1\tr9, r3\n\tadd\t68, r1, r4\n\tst.1\tr4, r3\n\tadd\t100, r1, r4\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB4_42\n\tadd\tr0, r0, r5\n.BB4_41:\n\tadd\tr5, r4, r6\n\tadd\tr5, r10, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB4_41\n.BB4_42:\n\tadd\tr10, r0, stack-[2]\n\tadd\tr3, r4, r4\n\tst.1\tr4, r0\n\tadd\t31, r3, r3\n\tand\tr3, r8, r3\n\tadd\t68, r3, r4\n\tst.1\tr1, r4\n\tadd\t131, r3, r3\n\tand\tr3, r8, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI4_8[0], r3, r5\n\tjump.gt\t@.BB4_1\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB4_1\n\tst.1\t64, r3\n\tadd\t@CPI4_5[0], r0, r3\n\tsub.s!\t@CPI4_5[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI4_5[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_5[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr1, r2, r1\n\tadd\t@CPI4_11[0], r0, r2\n\tadd\tr8, r0, stack-[4]\n\tadd\tr9, r0, stack-[3]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[3], r0, r5\n\tadd\tstack-[4], r0, r9\n\tld.1\t64, r11\n\tsub.s!\t@CPI4_1[0], r11, r1\n\tjump.gt\t@.BB4_1\n\tadd\t64, r11, r1\n\tst.1\t64, r1\n\tadd\t11, r0, r10\n\tst.1.inc\tr11, r10, r12\n\tadd\tstack[@calldatasize], r0, r1\n\tptr.add\tstack[@ptr_calldata], r1, r1\n\tld\tr1, r1\n\tst.1\tr12, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[2], r0, r6\n.BB4_46:\n\tld.1\tr5, r2\n\tsub!\tr2, r1, r2\n\tjump.le\t@.BB4_5\n\tld.1\tr11, r2\n\tsub!\tr2, r1, r2\n\tjump.le\t@.BB4_5\n\tadd\tr1, r6, r2\n\tld.1\tr2, r2\n\tand\t@CPI4_12[0], r2, r2\n\tadd\tr1, r12, r3\n\tld.1\tr3, r4\n\tand\t@CPI4_13[0], r4, r4\n\tor\tr4, r2, r2\n\tst.1\tr3, r2\n\tsub.s!\t10, r1, r2\n\tadd\t1, r1, r1\n\tjump.lt\t@.BB4_46\n\tld.1\t64, r4\n\tsub.s!\t@CPI4_1[0], r4, r1\n\tjump.gt\t@.BB4_1\n\tadd\t64, r4, r1\n\tst.1\t64, r1\n\tadd\t32, r4, r3\n\tadd\t@CPI4_14[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t18, r0, r1\n\tst.1\tr4, r1\n\tld.1\t64, r1\n\tadd\t32, r1, r2\n\tadd\t@CPI4_15[0], r0, r5\n\tst.1\tr2, r5\n\tadd\t36, r1, r5\n\tadd\t64, r0, r6\n\tst.1\tr5, r6\n\tld.1\tr4, r5\n\tadd\t100, r1, r4\n\tst.1\tr4, r5\n\tadd\t132, r1, r4\n\tsub!\tr5, r0, r6\n\tjump.eq\t@.BB4_53\n\tadd\tr0, r0, r6\n.BB4_52:\n\tadd\tr6, r4, r7\n\tadd\tr6, r3, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB4_52\n.BB4_53:\n\tadd\tr5, r4, r3\n\tst.1\tr3, r0\n\tadd\t31, r5, r3\n\tand\tr3, r9, r3\n\tadd\t68, r1, r5\n\tadd\t96, r3, r6\n\tst.1\tr5, r6\n\tadd\tr3, r4, r4\n\tld.1\tr11, r3\n\tst.1.inc\tr4, r3, r4\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB4_56\n\tadd\tr0, r0, r5\n.BB4_55:\n\tadd\tr5, r4, r6\n\tadd\tr5, r12, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB4_55\n.BB4_56:\n\tadd\tr3, r4, r5\n\tst.1\tr5, r0\n\tsub\tr4, r1, r4\n\tadd\t31, r3, r3\n\tand\tr3, r9, r3\n\tadd\tr3, r4, r3\n\tsub.s\t32, r3, r4\n\tst.1\tr1, r4\n\tadd\t31, r3, r3\n\tand\tr3, r9, r4\n\tadd\tr4, r1, r3\n\tsub!\tr3, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI4_8[0], r3, r5\n\tjump.gt\t@.BB4_1\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB4_1\n\tadd\tr10, r0, stack-[3]\n\tst.1\t64, r3\n\tadd\t@CPI4_5[0], r0, r3\n\tsub.s!\t@CPI4_5[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tld.1\tr1, r1\n\tsub.s!\t@CPI4_5[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_5[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr1, r2, r1\n\tadd\t@CPI4_11[0], r0, r2\n\tadd\tr11, r0, stack-[2]\n\tadd\tr12, r0, stack-[1]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[1], r0, r7\n\tadd\tstack-[2], r0, r6\n\tld.1\tr7, r1\n\tld.1\tr6, r2\n\tsub.s!\t31, r2, r3\n\tjump.gt\t@.BB4_60\n\tshl.s\t3, r2, r3\n\tsub\t256, r3, r3\n\tsub.s\t1, r0, r4\n\tshl\tr4, r3, r3\n\tsub!\tr2, r0, r2\n\tadd.eq\tr0, r0, r3\n\tand\tr3, r1, r1\n.BB4_60:\n\tld.1\t64, r3\n\tsub.s!\t@CPI4_1[0], r3, r2\n\tadd\tstack-[4], r0, r9\n\tadd\tstack-[3], r0, r5\n\tjump.gt\t@.BB4_1\n\tadd\t64, r3, r2\n\tst.1\t64, r2\n\tadd\t32, r3, r4\n\tadd\t@CPI4_16[0], r0, r2\n\tst.1\tr4, r2\n\tst.1\tr3, r5\n\tsub.s!\t31, r5, r3\n\tjump.gt\t@.BB4_63\n\tshl.s\t3, r5, r2\n\tsub\t256, r2, r2\n\tshr\t@CPI4_16[0], r2, r3\n\tshl\tr3, r2, r2\n\tsub!\tr5, r0, r3\n\tadd.eq\tr0, r0, r2\n.BB4_63:\n\tsub!\tr1, r2, r1\n\tjump.ne\t@.BB4_64\n\tld.1\t64, r4\n\tsub.s!\t@CPI4_1[0], r4, r1\n\tjump.gt\t@.BB4_1\n\tadd\t64, r4, r1\n\tst.1\t64, r1\n\tadd\t32, r4, r1\n\tadd\t@CPI4_23[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t23, r0, r2\n\tst.1\tr4, r2\n\tld.1\t64, r2\n\tadd\t32, r2, r3\n\tadd\t@CPI4_22[0], r0, r5\n\tst.1\tr3, r5\n\tadd\t36, r2, r5\n\tadd\tstack-[5], r0, r6\n\tst.1\tr5, r6\n\tld.1\tr4, r4\n\tadd\t68, r2, r5\n\tst.1\tr5, r4\n\tadd\t100, r2, r5\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB4_83\n\tadd\tr0, r0, r6\n.BB4_82:\n\tadd\tr6, r5, r7\n\tadd\tr6, r1, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.lt\t@.BB4_82\n.BB4_83:\n\tadd\tr4, r5, r1\n\tst.1\tr1, r0\n\tadd\t31, r4, r1\n\tand\tr1, r9, r1\n\tadd\t68, r1, r4\n\tst.1\tr2, r4\n\tadd\t131, r1, r1\n\tand\tr1, r9, r4\n\tadd\tr4, r2, r1\n\tsub!\tr1, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI4_8[0], r1, r5\n\tjump.gt\t@.BB4_1\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB4_1\n\tst.1\t64, r1\n\tcontext.gas_left\tr1\n\tadd\tr0, r0, stack-[5]\n\tjump\t@.BB4_17\n.BB4_64:\n\tld.1\tr7, r2\n\tld.1\tr6, r1\n\tsub.s!\t31, r1, r3\n\tjump.gt\t@.BB4_66\n\tshl.s\t3, r1, r3\n\tsub\t256, r3, r3\n\tsub.s\t1, r0, r4\n\tshl\tr4, r3, r3\n\tsub!\tr1, r0, r1\n\tadd.eq\tr0, r0, r3\n\tand\tr3, r2, r2\n.BB4_66:\n\tld.1\t64, r1\n\tsub.s!\t@CPI4_1[0], r1, r3\n\tjump.gt\t@.BB4_1\n\tadd\t64, r1, r3\n\tst.1\t64, r3\n\tadd\t32, r1, r4\n\tadd\t@CPI4_17[0], r0, r3\n\tst.1\tr4, r3\n\tst.1\tr1, r5\n\tsub.s!\t31, r5, r1\n\tjump.gt\t@.BB4_69\n\tshl.s\t3, r5, r1\n\tsub\t256, r1, r1\n\tshr\tr3, r1, r3\n\tshl\tr3, r1, r3\n\tsub!\tr5, r0, r1\n\tadd.eq\tr0, r0, r3\n.BB4_69:\n\tld.1\t64, r1\n\tsub!\tr2, r3, r2\n\tjump.ne\t@.BB4_77\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tjump.gt\t@.BB4_1\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tadd\t32, r1, r4\n\tadd\t@CPI4_21[0], r0, r2\n\tst.1\tr4, r2\n\tadd\t22, r0, r2\n\tst.1\tr1, r2\n\tld.1\t64, r2\n\tadd\t32, r2, r3\n\tadd\t@CPI4_22[0], r0, r5\n\tst.1\tr3, r5\n\tadd\t36, r2, r5\n\tadd\tstack-[5], r0, r6\n\tst.1\tr5, r6\n\tld.1\tr1, r1\n\tadd\t68, r2, r5\n\tst.1\tr5, r1\n\tadd\t100, r2, r5\n\tsub!\tr1, r0, r6\n\tjump.eq\t@.BB4_74\n\tadd\tr0, r0, r6\n.BB4_73:\n\tadd\tr6, r5, r7\n\tadd\tr6, r4, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.lt\t@.BB4_73\n.BB4_74:\n\tadd\tr1, r5, r4\n\tst.1\tr4, r0\n\tadd\t31, r1, r1\n\tand\tr1, r9, r1\n\tadd\t68, r1, r4\n\tst.1\tr2, r4\n\tadd\t131, r1, r1\n\tand\tr1, r9, r4\n\tadd\tr4, r2, r1\n\tsub!\tr1, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI4_8[0], r1, r5\n\tjump.gt\t@.BB4_1\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB4_1\n\tst.1\t64, r1\n\tadd\t1, r0, stack-[5]\n\tcontext.gas_left\tr1\n.BB4_17:\n\tadd\t@CPI4_5[0], r0, r4\n\tsub.s!\t@CPI4_5[0], r3, r5\n\tadd.ge\tr4, r0, r3\n\tshl.s\t64, r3, r3\n\tld.1\tr2, r2\n\tsub.s!\t@CPI4_5[0], r2, r5\n\tadd.ge\tr4, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r3, r2\n\tsub.s!\t@CPI4_5[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\tr2, r1, r1\n\tadd\t@CPI4_11[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r1\n\tret\n.BB4_5:\n\tadd\t@CPI4_24[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_25[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_30:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_18:\n\tld.1\t64, r2\n\tsub!\tr5, r0, r6\n\tjump.eq\t@.BB4_86\n\tadd\tr0, r0, r6\n.BB4_20:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB4_20\n.BB4_86:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB4_22\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB4_22:\n\tadd\t@CPI4_5[0], r0, r1\n\tsub.s!\t@CPI4_5[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_77:\n\tsub.s!\t@CPI4_1[0], r1, r2\n\tjump.le\t@.BB4_78\n.BB4_1:\n\tadd\t@CPI4_24[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_25[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB4_78:\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tadd\t32, r1, r2\n\tadd\t@CPI4_18[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t21, r0, r2\n\tst.1\tr1, r2\n\tnear_call\tr0, @fun_log, @DEFAULT_UNWIND\n\tadd\t@CPI4_19[0], r0, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI4_5[0], r0, r1\n\tsub.s!\t@CPI4_5[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI4_20[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nfun_log:\n.func_begin5:\n\tld.1\t64, r2\n\tadd\t32, r2, r3\n\tadd\t@CPI5_0[0], r0, r4\n\tst.1\tr3, r4\n\tadd\t36, r2, r4\n\tadd\t32, r0, r5\n\tst.1\tr4, r5\n\tadd\t68, r2, r5\n\tld.1.inc\tr1, r1, r4\n\tst.1\tr5, r1\n\tadd\t100, r2, r5\n\tsub!\tr1, r0, r6\n\tjump.eq\t@.BB5_3\n\tadd\tr0, r0, r6\n.BB5_2:\n\tadd\tr6, r5, r7\n\tadd\tr4, r6, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.lt\t@.BB5_2\n.BB5_3:\n\tadd\tr1, r5, r4\n\tst.1\tr4, r0\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r4\n\tand\tr1, r4, r1\n\tadd\t68, r1, r5\n\tst.1\tr2, r5\n\tadd\t131, r1, r1\n\tand\tr1, r4, r4\n\tadd\tr4, r2, r1\n\tsub!\tr1, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI5_1[0], r1, r5\n\tjump.gt\t@.BB5_5\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB5_5\n\tst.1\t64, r1\n\tadd\t@CPI5_2[0], r0, r1\n\tsub.s!\t@CPI5_2[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r3\n\tld.1\tr2, r2\n\tsub.s!\t@CPI5_2[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r3, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI5_2[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tshl.s\t192, r3, r1\n\tor\tr2, r1, r1\n\tadd\t@CPI5_3[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tret\n.BB5_5:\n\tadd\t@CPI5_4[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_5[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\nfun_isOnZkSyncChainId:\n.func_begin6:\n\tnop\tstack+=[1]\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t@CPI6_0[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI6_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI6_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI6_2[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB6_1\n\tadd\t1, r0, r2\n\tld\tr1, r1\n\tsub.s!\tstack-[1], r1, r3\n\tjump.eq\t@.BB6_5\n\tadd\t32, r0, r3\n\tsload\tr3, r3\n\tsub!\tr1, r3, r3\n\tjump.eq\t@.BB6_5\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r1\n\tadd\t0, r0, r2\n\tadd.eq\t1, r0, r2\n.BB6_5:\n\tand\t1, r2, r1\n\tret\n.BB6_1:\n\trevert\n.func_end6:\n\nfun_isOnZkSyncPrecompiles:\n.func_begin7:\n\tnop\tstack+=[4]\n\tld.1\t64, r5\n\tsub.s!\t@CPI7_0[0], r5, r1\n\tjump.gt\t@.BB7_1\n\tadd\t128, r5, r1\n\tst.1\t64, r1\n\tadd\t96, r5, r1\n\tadd\t8, r0, r2\n\tst.1\tr1, r2\n\tadd\t64, r5, r1\n\tadd\t5, r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r5, r1\n\tadd\t4, r0, r2\n\tst.1\tr1, r2\n\tadd\t3, r0, r1\n\tst.1\tr5, r1\n\tadd\t32777, r0, stack-[1]\n\tadd\t1, r0, r3\n\tadd\tr0, r0, r6\n\tadd\tr5, r0, stack-[3]\n\tadd\tr3, r0, stack-[2]\n\tjump\t@.BB7_3\n.BB7_6:\n\tsub.s!\t3, r6, r1\n\tadd\t1, r6, r6\n\tjump.ge\t@.BB7_7\n.BB7_3:\n\tshl.s\t5, r6, r1\n\tadd\tr1, r5, r1\n\tld.1\tr1, r2\n\tcontext.gas_left\tr1\n\tand\t@CPI7_1[0], r2, r4\n\tsub.s!\t4, r4, r2\n\tjump.eq\t@.BB7_6\n\tsub.s!\t@CPI7_2[0], r1, r2\n\tadd.ge\t@CPI7_2[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI7_3[0], r1, r1\n\tadd\tstack-[1], r0, r2\n\tadd\tr0, r0, r5\n\tadd\tr6, r0, stack-[4]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r6\n\tadd\tstack-[2], r0, r3\n\tadd\tstack-[3], r0, r5\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB7_6\n\tadd\tr3, r0, r1\n\tret\n.BB7_7:\n\tadd\tr0, r0, r3\n\tadd\tr3, r0, r1\n\tret\n.BB7_1:\n\tadd\t@CPI7_4[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI7_5[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end7:\n\nfun_isZkSyncChain:\n.func_begin8:\n\tnop\tstack+=[4]\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tadd\t@CPI8_0[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI8_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI8_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI8_2[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB8_1\n\tld\tr1, r1\n\tsub.s!\tstack-[4], r1, r2\n\tadd\tr0, r0, r3\n\tjump.eq\t@.BB8_5\n\tadd\t32, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r2\n\tadd\tr0, r0, r3\n\tjump.eq\t@.BB8_5\n\tadd\t33, r0, r2\n\tsload\tr2, r2\n\tsub!\tr1, r2, r1\n\tadd\tr0, r0, r3\n\tjump.ne\t@.BB8_6\n.BB8_5:\n\tadd\tr3, r0, r1\n\tret\n.BB8_6:\n\tld.1\t64, r5\n\tsub.s!\t@CPI8_3[0], r5, r1\n\tjump.ge\t@.BB8_7\n\tadd\t128, r5, r1\n\tst.1\t64, r1\n\tadd\t96, r5, r1\n\tadd\t8, r0, r2\n\tst.1\tr1, r2\n\tadd\t64, r5, r1\n\tadd\t5, r0, r2\n\tst.1\tr1, r2\n\tadd\t32, r5, r1\n\tadd\t4, r0, r2\n\tst.1\tr1, r2\n\tadd\t3, r0, r1\n\tst.1\tr5, r1\n\tadd\t32777, r0, stack-[1]\n\tadd\t1, r0, r3\n\tadd\tr0, r0, r6\n\tadd\tr5, r0, stack-[3]\n\tadd\tr3, r0, stack-[2]\n\tjump\t@.BB8_9\n.BB8_12:\n\tsub.s!\t3, r6, r1\n\tadd\t1, r6, r6\n\tjump.ge\t@.BB8_13\n.BB8_9:\n\tshl.s\t5, r6, r1\n\tadd\tr1, r5, r1\n\tld.1\tr1, r2\n\tcontext.gas_left\tr1\n\tand\t@CPI8_4[0], r2, r4\n\tsub.s!\t4, r4, r2\n\tjump.eq\t@.BB8_12\n\tsub.s!\t@CPI8_1[0], r1, r2\n\tadd.ge\t@CPI8_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI8_5[0], r1, r1\n\tadd\tstack-[1], r0, r2\n\tadd\tr0, r0, r5\n\tadd\tr6, r0, stack-[4]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r6\n\tadd\tstack-[2], r0, r3\n\tadd\tstack-[3], r0, r5\n\tand!\t1, r2, r1\n\tjump.ne\t@.BB8_12\n\tadd\tr3, r0, r1\n\tret\n.BB8_13:\n\tadd\tr0, r0, r3\n\tadd\tr3, r0, r1\n\tret\n.BB8_1:\n\trevert\n.BB8_7:\n\tadd\t@CPI8_6[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI8_7[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end8:\n\n__cxa_throw:\n.func_begin9:\n\trevert\n.func_end9:\n\n__farcall:\n.func_begin10:\n.tmp0:\n\tfar_call\tr1, r2, @.BB10_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB10_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end10:\n\n__staticcall:\n.func_begin11:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB11_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB11_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end11:\n\n\t.data\n\t.p2align\t5, 0x0\ncalldatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI4_5:\nCPI5_2:\nCPI6_1:\nCPI7_2:\nCPI8_1:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 2233625728\nCPI0_3:\n\t.cell 3124842405\nCPI0_4:\n\t.cell 3792478064\nCPI0_5:\n\t.cell 3792478065\nCPI0_6:\n\t.cell 3920469035\nCPI0_7:\n\t.cell 4202047188\nCPI0_8:\n\t.cell 3124842406\nCPI0_9:\n\t.cell 3651357473\nCPI0_10:\n\t.cell 2441910439\nCPI0_11:\n\t.cell 2441910440\nCPI0_12:\n\t.cell 3041954473\nCPI0_13:\n\t.cell 2233625729\nCPI0_14:\n\t.cell 2439649222\nCPI0_15:\n\t.cell 1064470259\nCPI0_16:\n\t.cell 1725540767\nCPI0_17:\n\t.cell 1725540768\nCPI0_18:\n\t.cell 1852525512\nCPI0_19:\n\t.cell 1064470260\nCPI0_20:\n\t.cell 1169906350\nCPI0_21:\n\t.cell 719206527\nCPI0_22:\n\t.cell 719206528\nCPI0_23:\n\t.cell 1046363171\nCPI0_24:\n\t.cell 139621531\nCPI0_25:\n\t.cell 517440284\nCPI0_26:\n\t.cell 2535301202817642044428229017600\nCPI0_27:\n\t.cell 18446744073709551519\nCPI0_28:\n\t.cell 44984653956762510177650742763089902205022999709696827960428333590428543614976\nCPI0_29:\n\t.cell 35927816869374799870719379083564229055501702272537394013163125285393441125742\nCPI0_30:\nCPI4_22:\nCPI5_0:\n\t.cell 29485693692093900896535320720837539044516270774257971310649688876405881831424\nCPI0_31:\nCPI3_0:\nCPI4_8:\nCPI5_1:\n\t.cell 18446744073709551615\nCPI0_32:\n\t.cell 55695273791963226477682027276522320875430017583991468933329826377852681977856\nCPI0_33:\n\t.cell -16618591066602222985122372761841479470695187910499018944623573964086398943232\nCPI0_34:\n\t.cell 20990867812933618844647254958191411055703016061324431113072973736399821864960\nCPI0_35:\n\t.cell 15528719852795810168334614265856\nCPI0_36:\nCPI4_6:\n\t.cell 645326474426547203313410069153905908525362434349\nCPI0_37:\n\t.cell 38878206584692966203415385907871375197469080758325516314230789535345649042549\nCPI0_38:\nCPI1_0:\nCPI7_1:\nCPI8_4:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_39:\n\t.cell 2535301200456458802993406410752\nCPI0_40:\n\t.cell 46361386726410499263322427381369506175992020241588171917386103515624534704128\nCPI0_41:\n\t.cell 46308022326495007027972728677917914892729792999299745830475596687180801507328\nCPI0_42:\n\t.cell 5387515053331158197795811229696\nCPI0_43:\n\t.cell 57896044618658097711785492504343953926634992332820282019728792003956564819936\nCPI0_44:\nCPI7_0:\n\t.cell 18446744073709551487\nCPI0_45:\n\t.cell -48719757687822547800745197551118351534541568878739321821808546113428889233771\nCPI0_46:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_47:\nCPI6_0:\nCPI8_0:\n\t.cell -45892047197499416867505091379861151366373029554911521591129889233172042914037\nCPI0_48:\nCPI6_2:\nCPI8_2:\n\t.cell 904625751086426111047927909714404454142933102791518401696464687643217625088\nCPI0_49:\nCPI7_3:\nCPI8_5:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_50:\n\t.cell 55371796281815195168167723001542036422477424776400971004801198784948912259072\nCPI0_51:\n\t.cell 37731746783061185660350875849884670107245567124908624499486762246297581743648\nCPI0_52:\nCPI4_11:\nCPI5_3:\n\t.cell 120209876281281145568259943\nCPI0_53:\nCPI3_1:\nCPI4_24:\nCPI5_4:\nCPI7_4:\nCPI8_6:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_54:\nCPI3_2:\nCPI4_25:\nCPI5_5:\nCPI7_5:\nCPI8_7:\n\t.cell 2852213850513516153367582212096\nCPI0_55:\n\t.cell 18446744073709551423\nCPI0_56:\n\t.cell 6454973039698199198119942482240540643982028891330163610098731264865829167633\nCPI0_57:\n\t.cell -26959946667150639794667015087019630673637144422540572481103610249216\nCPI0_58:\nCPI4_1:\n\t.cell 18446744073709551551\nCPI0_59:\n\t.cell 2481041784956016742021570618494952475758789857281704946240779902470294861374\nCPI0_60:\n\t.cell 26616959624788145501257665028759500958019551560565664426117466910078421933505\nCPI0_61:\n\t.cell -26169279673760072341673943167871893214131042372482409454972450661548556448747\nCPI0_62:\n\t.cell -35624623585156310935986566609950774337791491079595188565361216048441042957010\nCPI0_63:\n\t.cell 18446744073709551616\nCPI0_64:\n\t.cell 49422300655976383518971161772042036479724517635858811238160587340303074464591\nCPI0_65:\n\t.cell -18002263324862296164297574372220909754226456243825434961346737007256845270391\nCPI4_0:\n\t.cell 18446744073709551520\nCPI4_2:\n\t.cell 46332820166278154573974752631342126580518362703026463520024593734615145906176\nCPI4_3:\n\t.cell 20434403445238628374561008089751196715970904212857911746532051975133592551424\nCPI4_4:\n\t.cell -53786327962123681882403693927889922387696495599625828119912749775981180354560\nCPI4_7:\n\t.cell 8589934560\nCPI4_9:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI4_10:\n\t.cell 5384461846721192828796334040121479383647042657413896942978273110825516400640\nCPI4_12:\n\t.cell -452312848583266388373324160190187140051835877600158453279131187530910662656\nCPI4_13:\n\t.cell 452312848583266388373324160190187140051835877600158453279131187530910662655\nCPI4_14:\n\t.cell 32311133749684535630926220120114760249273035811801589386673163789880010997760\nCPI4_15:\n\t.cell 34086472297197132054457081643594089646359731274536790467922792813265611128832\nCPI4_16:\n\t.cell 46332820166291396033436546855304727523895084106726430516885355097745864523776\nCPI4_17:\n\t.cell 46332820166291396033387507746285857393849911122144254973746461509673451257856\nCPI4_18:\n\t.cell 38641686770895300367236334112107328856093177263747301157760773916326820315136\nCPI4_19:\n\t.cell -17262886072841522419582477861804544619048823324452110730108658695652520230912\nCPI4_20:\n\t.cell 316912650057057350374175801344\nCPI4_21:\n\t.cell 38178759162904981153650077011140899960786346398156356829421808634070147530752\nCPI4_23:\n\t.cell 38178759162904981154041052309731403603116449739644607900018862901752494030848\nCPI8_3:\n\t.cell 18446744073709551488\n","methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSenders()":"1ed7831c","failed()":"ba414fa6","isOnZkSyncChainId()":"45bb5aae","isOnZkSyncPrecompiles()":"d9a34b21","isZkSyncChain()":"0852749b","is_foundry_zksync()":"6e6b4bc8","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23","testZkSyncChainFails()":"918c98a8","testZkSyncFoundryFails()":"e9ad9c2b"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.580a8fe5\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FoundryZkSyncChecker__UnknownFoundryVersion\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOnZkSyncChainId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOnZkSyncPrecompiles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isZkSync\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isZkSyncChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isZkSync\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_foundry_zksync\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testZkSyncChainFails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testZkSyncFoundryFails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"is_foundry_zksync()\":{\"notice\":\"returns the current version of foundry.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/unit/ZkSyncDevOps.t.sol\":\"ZkSyncDevOps\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x2ba8ee7e4a68efd4cd75331b229874f4d4dc0a1010599afad88fc2cae5cb5d4a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77ce1968d402b0414fec0a344b59c275d0706d4df5ac6293d605dd2202016345\",\"dweb:/ipfs/QmSVy4N4F15NzEuSpmvwRj1nTfAwaJpng7CywUBWLnWC4w\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x53c7ffb58010e54ed351157897f56eef1b57923a943ca9473a160a459e9ebf94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e7dd236f0db2d4c1592635ef4de1f08c964181a32d1e722eaea2de911b1944f4\",\"dweb:/ipfs/QmcYjas4pbHrvtBoaUyWVUNv4tJvDu6nDwirxGXbRpUYGD\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x651d84d948832f0ef45686417aa68ffb871378fa788a4123dbf37844903c66f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff20f5ac9de3dc3ba86b1bf1f2723174e82ce3499ad67cb0ccfa7d28baeee678\",\"dweb:/ipfs/QmRZkUFKz7AmF7yk6o317sk822HHhGVPXZQgX8G4LfYfft\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xf92ea94fe38f8370a8dc5f591ebfb4958869e18d877469ce422162cc88c8b063\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://620b5d4b2ff24d66120ce9dbb72fbde7276f2e8b3bb93f626874183aee01e307\",\"dweb:/ipfs/Qmcyc8co7vCiJ7gUd3jj5Hc1rRPihjt3WSKs5ut6eiU1Ze\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0x3293dcbb7acd28df553c954e4e39e288bf10aab7ecda8d50ef21b4f4a91a28d9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eb374daf6df34f4392f8926f1fddbce9f22c423066aeaefdfbe77395f77967b\",\"dweb:/ipfs/QmWR81zBJRX2uyRjveGzikYPj6ZwKppWsU49YEQXTLWUsN\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"lib/foundry-devops/src/FoundryZkSyncChecker.sol\":{\"keccak256\":\"0x488deaf6ce013336f157f97f655fd89753256ed5df03fa60cd931eaa3d26f02f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://23b1e9e27970aebf56d16ed5bdeed36b15b4eb4eae6186fe3b2216beed9c2526\",\"dweb:/ipfs/QmWvjyYVhfXqEx8E53rHQMYhkUv6NdSfDRBgZgxnQPQrWW\"]},\"lib/foundry-devops/src/ZkSyncChainChecker.sol\":{\"keccak256\":\"0xbcf7e7847171a8e028ccecbe9cd3a75f9d3b102c12806d86d13a57a66d204a6a\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5c075822f6919ac2eaa770d7db6497447cacc0aa9c386bfd6f52ab71fd7d0081\",\"dweb:/ipfs/QmSryCcJrLfifu3SCiAQganu4YxTXJXs2JqpsfNymPp2qL\"]},\"test/unit/ZkSyncDevOps.t.sol\":{\"keccak256\":\"0xc1ee888fde0fd32c706a5079be25ae5bfa897facb6da6f57c9107c01456a5401\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ffea9b6ac00c86df5191f7dab931e537c9d8af77c9dc89bd6334615deb78660\",\"dweb:/ipfs/QmbRGot2B1GZEKAhS2aumE17stYHsE4X5sJjCH8H9Hn3LA\"]}},\"version\":1}","solc_version":"0.8.19","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/StdAssertions.sol\", 2:\"lib/forge-std/src/StdChains.sol\", 3:\"lib/forge-std/src/StdCheats.sol\", 5:\"lib/forge-std/src/StdInvariant.sol\", 11:\"lib/forge-std/src/StdUtils.sol\", 12:\"lib/forge-std/src/Test.sol\", 23:\"lib/foundry-devops/src/FoundryZkSyncChecker.sol\", 24:\"lib/foundry-devops/src/ZkSyncChainChecker.sol\", 25:\"test/unit/ZkSyncDevOps.t.sol\"\nobject \"ZkSyncDevOps_47165\" {\n    code {\n        {\n            /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := not(255)\n            sstore(/** @src 2:3166:3170  \"true\" */ 0x0c, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ or(and(sload(/** @src 2:3166:3170  \"true\" */ 0x0c), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2), /** @src 2:3166:3170  \"true\" */ 0x01))\n            /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            sstore(/** @src 12:1038:1042  \"true\" */ 0x1e, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ or(and(sload(/** @src 12:1038:1042  \"true\" */ 0x1e), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2), /** @src 2:3166:3170  \"true\" */ 0x01))\n            /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            sstore(/** @src 24:196:199  \"324\" */ 0x1f, 0x0144)\n            /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            sstore(/** @src 24:236:239  \"300\" */ 0x20, 0x012c)\n            /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            sstore(/** @src 24:281:284  \"260\" */ 0x21, 0x0104)\n            /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            let _3 := datasize(\"ZkSyncDevOps_47165_deployed\")\n            codecopy(_1, dataoffset(\"ZkSyncDevOps_47165_deployed\"), _3)\n            return(_1, _3)\n        }\n    }\n    /// @use-src 0:\"lib/forge-std/src/Base.sol\", 1:\"lib/forge-std/src/StdAssertions.sol\", 5:\"lib/forge-std/src/StdInvariant.sol\", 12:\"lib/forge-std/src/Test.sol\", 15:\"lib/forge-std/src/console2.sol\", 23:\"lib/foundry-devops/src/FoundryZkSyncChecker.sol\", 24:\"lib/foundry-devops/src/ZkSyncChainChecker.sol\", 25:\"test/unit/ZkSyncDevOps.t.sol\"\n    object \"ZkSyncDevOps_47165_deployed\" {\n        code {\n            {\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(64, 128)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x0852749b { external_fun_isZkSyncChain() }\n                    case 0x1ed7831c { external_fun_excludeSenders() }\n                    case 0x2ade3880 {\n                        external_fun_targetInterfaces()\n                    }\n                    case 0x3e5e3c23 { external_fun_targetSenders() }\n                    case 0x3f7286f4 {\n                        external_fun_targetContracts()\n                    }\n                    case 0x45bb5aae {\n                        external_fun_isOnZkSyncChainId()\n                    }\n                    case 0x66d9a9a0 {\n                        external_fun_targetArtifactSelectors()\n                    }\n                    case 0x6e6b4bc8 {\n                        external_fun_is_foundry_zksync()\n                    }\n                    case 0x85226c81 {\n                        external_fun_targetArtifacts()\n                    }\n                    case 0x916a17c6 {\n                        external_fun_targetSelectors()\n                    }\n                    case 0x918c98a8 {\n                        external_fun_testZkSyncChainFails()\n                    }\n                    case 0xb5508aa9 {\n                        external_fun_excludeArtifacts()\n                    }\n                    case 0xba414fa6 { external_fun_failed() }\n                    case 0xd9a34b21 {\n                        external_fun_isOnZkSyncPrecompiles()\n                    }\n                    case 0xe20c9f71 {\n                        external_fun_excludeContracts()\n                    }\n                    case 0xe9ad9c2b {\n                        external_fun_testZkSyncFoundryFails()\n                    }\n                    case 0xfa7626d4 { external_fun_IS_TEST() }\n                }\n                revert(0, 0)\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function external_fun_isZkSyncChain()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_isZkSyncChain()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function array_storeLengthForEncoding_array_address_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function abi_encode_array_address_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 64)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), sub(shl(160, 1), 1)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                tail := pos\n            }\n            function external_fun_excludeSenders()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 5:2674:2690  \"_excludedSenders\" */ 0x16)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 5:2674:2690  \"_excludedSenders\" */ 0x16)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let srcPtr := 97789825912453899259273410636466998099043528421815129078110847000656284369545\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, 1), 1)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n            function abi_encode_array_struct_FuzzInterface_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, _2)\n                let _3 := 5\n                let tail_2 := add(add(headStart, shl(_3, length)), _2)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                let i_1 := i\n                for { } lt(i_1, length) { i_1 := add(i_1, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    let _4 := mload(srcPtr)\n                    let tail_3 := add(tail_2, _2)\n                    mstore(tail_2, and(mload(_4), sub(shl(160, 1), 1)))\n                    let memberValue0 := mload(add(_4, _1))\n                    mstore(add(tail_2, _1), _2)\n                    let pos_1 := tail_3\n                    let length_1 := mload(memberValue0)\n                    mstore(tail_3, length_1)\n                    let _5 := 96\n                    pos_1 := add(tail_2, _5)\n                    let tail_4 := add(add(tail_2, shl(_3, length_1)), _5)\n                    let srcPtr_1 := add(memberValue0, _1)\n                    let i_2 := i\n                    for { } lt(i_2, length_1) { i_2 := add(i_2, 1) }\n                    {\n                        mstore(pos_1, add(sub(tail_4, tail_2), not(95)))\n                        tail_4 := abi_encode_string(mload(srcPtr_1), tail_4)\n                        srcPtr_1 := add(srcPtr_1, _1)\n                        pos_1 := add(pos_1, _1)\n                    }\n                    tail_2 := tail_4\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetInterfaces()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 5:3604:3623  \"_targetedInterfaces\" */ 0x1d)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let _2 := 64\n                let memPtr := mload(_2)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _3 := 0x20\n                mpos := add(memPtr, _3)\n                mstore(0, /** @src 5:3604:3623  \"_targetedInterfaces\" */ 0x1d)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let spos := 49422300655976383518971161772042036479724517635858811238160587340303074464591\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let memPtr_1 := mload(_2)\n                    finalize_allocation_8084(memPtr_1)\n                    mstore(memPtr_1, and(sload(spos), sub(shl(160, 1), 1)))\n                    mstore(add(memPtr_1, _3), copy_array_from_storage_to_memory_array_string__dyn(add(spos, 1)))\n                    mstore(mpos, memPtr_1)\n                    mpos := add(mpos, _3)\n                    spos := add(spos, 2)\n                }\n                let memPos := mload(_2)\n                return(memPos, sub(abi_encode_array_struct_FuzzInterface_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_targetSenders()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 5:3450:3466  \"_targetedSenders\" */ 0x18)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 5:3450:3466  \"_targetedSenders\" */ 0x18)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let srcPtr := 80167465652159884487584418398737133515478493586045375474096367959472086682926\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, 1), 1)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function external_fun_targetContracts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 5:3157:3175  \"_targetedContracts\" */ 0x17)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 5:3157:3175  \"_targetedContracts\" */ 0x17)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let srcPtr := 89622809563556123081897041840816014639138942293158154584485133346364573191189\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, 1), 1)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function external_fun_isOnZkSyncChainId()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_isOnZkSyncChainId()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function abi_encode_bytes4(value, pos)\n            {\n                mstore(pos, and(value, shl(224, 0xffffffff)))\n            }\n            function abi_encode_array_bytes4_dyn(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                let srcPtr := add(value, _1)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), shl(224, 0xffffffff)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                end := pos\n            }\n            function abi_encode_array_struct_FuzzArtifactSelector_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, _2)\n                let tail_2 := add(add(headStart, shl(5, length)), _2)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    let _3 := mload(srcPtr)\n                    let memberValue0 := mload(_3)\n                    mstore(tail_2, _2)\n                    let tail_3 := abi_encode_string(memberValue0, add(tail_2, _2))\n                    let memberValue0_1 := mload(add(_3, _1))\n                    mstore(add(tail_2, _1), sub(tail_3, tail_2))\n                    tail_2 := abi_encode_array_bytes4_dyn(memberValue0_1, tail_3)\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetArtifactSelectors()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 5:3002:3028  \"_targetedArtifactSelectors\" */ 0x1b)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let _2 := 64\n                let memPtr := mload(_2)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _3 := 0x20\n                mpos := add(memPtr, _3)\n                mstore(0, /** @src 5:3002:3028  \"_targetedArtifactSelectors\" */ 0x1b)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let spos := 26616959624788145501257665028759500958019551560565664426117466910078421933505\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let memPtr_1 := mload(_2)\n                    finalize_allocation_8084(memPtr_1)\n                    mstore(memPtr_1, copy_array_from_storage_to_memory_string(spos))\n                    mstore(add(memPtr_1, _3), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos, 1)))\n                    mstore(mpos, memPtr_1)\n                    mpos := add(mpos, _3)\n                    spos := add(spos, 2)\n                }\n                let memPos := mload(_2)\n                return(memPos, sub(abi_encode_array_struct_FuzzArtifactSelector_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_is_foundry_zksync()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_is_foundry_zksync()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function abi_encode_array_string_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 64)\n                let tail_2 := add(add(headStart, shl(5, length)), 64)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    tail_2 := abi_encode_string(mload(srcPtr), tail_2)\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetArtifacts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 5:2818:2836  \"_targetedArtifacts\" */ 0x1a)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _2 := 0x20\n                mpos := add(memPtr, _2)\n                mstore(0, /** @src 5:2818:2836  \"_targetedArtifacts\" */ 0x1a)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let spos := 2481041784956016742021570618494952475758789857281704946240779902470294861374\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                    mpos := add(mpos, _2)\n                    spos := add(spos, 1)\n                }\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_string_dyn(memPos, memPtr), memPos))\n            }\n            function abi_encode_array_struct_FuzzSelector_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, _2)\n                let tail_2 := add(add(headStart, shl(5, length)), _2)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    let _3 := mload(srcPtr)\n                    mstore(tail_2, and(mload(_3), sub(shl(160, 1), 1)))\n                    let memberValue0 := mload(add(_3, _1))\n                    mstore(add(tail_2, _1), _2)\n                    tail_2 := abi_encode_array_bytes4_dyn(memberValue0, add(tail_2, _2))\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function external_fun_targetSelectors()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 5:3309:3327  \"_targetedSelectors\" */ 0x1c)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let _2 := 64\n                let memPtr := mload(_2)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _3 := 0x20\n                mpos := add(memPtr, _3)\n                mstore(0, /** @src 5:3309:3327  \"_targetedSelectors\" */ 0x1c)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let spos := 6454973039698199198119942482240540643982028891330163610098731264865829167633\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let memPtr_1 := mload(_2)\n                    finalize_allocation_8084(memPtr_1)\n                    mstore(memPtr_1, and(sload(spos), sub(shl(160, 1), 1)))\n                    mstore(add(memPtr_1, _3), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos, 1)))\n                    mstore(mpos, memPtr_1)\n                    mpos := add(mpos, _3)\n                    spos := add(spos, 2)\n                }\n                let memPos := mload(_2)\n                return(memPos, sub(abi_encode_array_struct_FuzzSelector_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_testZkSyncChainFails()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                /// @src 25:464:769  \"function testZkSyncChainFails() public skipZkSync {...\"\n                modifier_skipZkSync()\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                return(0, 0)\n            }\n            function external_fun_excludeArtifacts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let length := sload(/** @src 5:2384:2402  \"_excludedArtifacts\" */ 0x19)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, _1)\n                mstore(memPtr, length)\n                let mpos := memPtr\n                let _2 := 0x20\n                mpos := add(memPtr, _2)\n                mstore(0, /** @src 5:2384:2402  \"_excludedArtifacts\" */ 0x19)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let spos := 67072331549493647622825787457569556318728415786901242217649037894484240406165\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                    mpos := add(mpos, _2)\n                    spos := add(spos, 1)\n                }\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_string_dyn(memPos, memPtr), memPos))\n            }\n            function external_fun_failed()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_failed()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function external_fun_isOnZkSyncPrecompiles()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let ret := fun_isOnZkSyncPrecompiles()\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(ret)))\n                return(memPos, 32)\n            }\n            function external_fun_excludeContracts()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let pos := mload(64)\n                let pos_1 := pos\n                let length := sload(/** @src 5:2532:2550  \"_excludedContracts\" */ 0x15)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, _1)\n                mstore(0, /** @src 5:2532:2550  \"_excludedContracts\" */ 0x15)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let srcPtr := 38878206584692966203415385907871375197469080758325516314230789535345649042549\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(sload(srcPtr), sub(shl(160, 1), 1)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, 1)\n                }\n                finalize_allocation(pos_1, sub(pos, pos_1))\n                let memPos := mload(64)\n                return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_1), memPos))\n            }\n            function external_fun_testZkSyncFoundryFails()\n            {\n                if callvalue() { revert(0, 0) }\n                let _1 := 0\n                if slt(add(calldatasize(), not(3)), _1) { revert(_1, _1) }\n                /// @src 23:1843:1978  \"if (is_foundry_zksync()) {...\"\n                switch /** @src 23:1847:1866  \"is_foundry_zksync()\" */ fun_is_foundry_zksync()\n                case /** @src 23:1843:1978  \"if (is_foundry_zksync()) {...\" */ 0 {\n                    /// @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\"\n                    let _2 := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                    /// @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\"\n                    mstore(_2, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(225, 0x6da11afb))\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    mstore(/** @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\" */ add(_2, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 4), 64)\n                    mstore(add(/** @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\" */ _2, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 68), 14)\n                    mstore(add(/** @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\" */ _2, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 100), shl(144, 0x7b226869223a202274727565227d))\n                    mstore(add(/** @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\" */ _2, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 36), 128)\n                    mstore(add(/** @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\" */ _2, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 132), 3)\n                    mstore(add(/** @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\" */ _2, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 164), \".hi\")\n                    /// @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\"\n                    let _3 := staticcall(gas(), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d, /** @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\" */ _2, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 196, /** @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\" */ _2, 32)\n                    if iszero(_3) { revert_forward() }\n                    let expr := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1\n                    /// @src 25:1097:1138  \"vm.keyExistsJson('{\\\"hi\\\": \\\"true\\\"}', \\\".hi\\\")\"\n                    if _3\n                    {\n                        let _4 := 32\n                        if gt(_4, returndatasize()) { _4 := returndatasize() }\n                        finalize_allocation(_2, _4)\n                        expr := abi_decode_bool_fromMemory(_2, add(_2, _4))\n                    }\n                    /// @src 25:1148:1162  \"assert(exists)\"\n                    assert_helper(expr)\n                }\n                default /// @src 23:1843:1978  \"if (is_foundry_zksync()) {...\"\n                {\n                    /// @src 23:1882:1935  \"console2.log(\\\"Only foundry works with this function\\\")\"\n                    fun_log(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ copy_literal_to_memory_225017b3ee6908a58acafeb7efbfa4ac059e5e6dd39344ec9cbb1ac1929b76c4())\n                }\n                return(_1, _1)\n            }\n            function external_fun_IS_TEST()\n            {\n                if callvalue() { revert(0, 0) }\n                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                let value := and(sload(/** @src 12:1016:1042  \"bool public IS_TEST = true\" */ 30), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0xff)\n                let memPos := mload(64)\n                mstore(memPos, iszero(iszero(value)))\n                return(memPos, 32)\n            }\n            /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation_8084(memPtr)\n            {\n                let newFreePtr := add(memPtr, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 64)\n                /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 64, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ newFreePtr)\n            }\n            function finalize_allocation_12873(memPtr)\n            {\n                let newFreePtr := add(memPtr, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 96)\n                /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ and(add(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ size, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 31), not(31)))\n                /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function revert_forward()\n            {\n                let pos := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @ast-id 247 @src 1:1243:1447  \"function failed() public view returns (bool) {...\"\n            function fun_failed() -> var\n            {\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let value := and(sload(/** @src 1:1302:1309  \"_failed\" */ 0x08), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0xff)\n                /// @src 1:1298:1441  \"if (_failed) {...\"\n                switch /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ value\n                case /** @src 1:1298:1441  \"if (_failed) {...\" */ 0 {\n                    /// @src 1:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let _1 := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                    /// @src 1:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    mstore(_1, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(228, 0x0667f9d7))\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    let _2 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                    mstore(/** @src 1:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ add(_1, 4), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2)\n                    /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    mstore(add(/** @src 1:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36), shl(210, 0x19985a5b1959))\n                    /// @src 1:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let _3 := staticcall(gas(), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2, /** @src 1:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 68, /** @src 1:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, 32)\n                    if iszero(_3) { revert_forward() }\n                    let expr := /** @src -1:-1:-1 */ 0\n                    /// @src 1:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    if _3\n                    {\n                        let _4 := 32\n                        if gt(_4, returndatasize()) { _4 := returndatasize() }\n                        finalize_allocation(_1, _4)\n                        /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                        if slt(sub(/** @src 1:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ add(_1, _4), /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _1), /** @src 1:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ 32)\n                        /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                        {\n                            /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                            revert(/** @src -1:-1:-1 */ expr, expr)\n                        }\n                        /// @src 1:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                        expr := /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ mload(_1)\n                    }\n                    /// @src 1:1370:1430  \"return vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\"\n                    var := /** @src 1:1377:1430  \"vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\" */ iszero(iszero(expr))\n                    /// @src 1:1370:1430  \"return vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\"\n                    leave\n                }\n                default /// @src 1:1298:1441  \"if (_failed) {...\"\n                {\n                    /// @src 1:1325:1339  \"return _failed\"\n                    var := value\n                    leave\n                }\n            }\n            /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            function array_allocation_size_array_string_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := add(shl(5, length), 0x20)\n            }\n            function array_dataslot_array_string_storage_dyn(ptr) -> data\n            {\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let slotValue := sload(slot)\n                let length := /** @src -1:-1:-1 */ ret\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let _1 := 1\n                length := shr(_1, slotValue)\n                let outOfPlaceEncoding := and(slotValue, _1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                let _2 := 32\n                if eq(outOfPlaceEncoding, lt(length, _2))\n                {\n                    mstore(/** @src -1:-1:-1 */ ret, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x4e487b71))\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    mstore(4, 0x22)\n                    revert(/** @src -1:-1:-1 */ ret, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x24)\n                }\n                let pos := array_storeLengthForEncoding_array_address_dyn(memPtr, length)\n                switch outOfPlaceEncoding\n                case 0 {\n                    mstore(pos, and(slotValue, not(255)))\n                    ret := add(pos, shl(5, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_array_string_storage_dyn(slot)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    for { } lt(i, length) { i := add(i, _2) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, _1)\n                    }\n                    ret := add(pos, i)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n            function copy_array_from_storage_to_memory_array_string__dyn(slot) -> memPtr\n            {\n                let length := sload(slot)\n                let _1 := array_allocation_size_array_string_dyn(length)\n                let memPtr_1 := mload(64)\n                finalize_allocation(memPtr_1, _1)\n                mstore(memPtr_1, length)\n                memPtr := memPtr_1\n                let mpos := memPtr_1\n                let _2 := 0x20\n                mpos := add(memPtr_1, _2)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ slot)\n                let spos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _2)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(mpos, copy_array_from_storage_to_memory_string(spos))\n                    mpos := add(mpos, _2)\n                    spos := add(spos, 1)\n                }\n            }\n            function copy_array_from_storage_to_memory_array_bytes4_dyn(slot) -> memPtr\n            {\n                let _1 := 64\n                memPtr := mload(_1)\n                let pos := memPtr\n                let length := sload(slot)\n                pos := array_storeLengthForEncoding_array_address_dyn(memPtr, length)\n                let srcPtr := array_dataslot_array_string_storage_dyn(slot)\n                let itemCounter := /** @src -1:-1:-1 */ 0\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                for { }\n                lt(add(itemCounter, 7), length)\n                {\n                    itemCounter := add(itemCounter, 8)\n                }\n                {\n                    let data := sload(srcPtr)\n                    /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _2 := 224\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(_2, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data), pos)\n                    let _3 := 0x20\n                    /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _4 := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ shl(224, 0xffffffff)\n                    /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _5 := 192\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(_5, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data), /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, _3))\n                    /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _6 := 160\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(_6, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data), /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, _1))\n                    let _7 := 96\n                    /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                    let _8 := 128\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(_8, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data), /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, _7))\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _7, data), /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _8))\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, data), /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _6))\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _3, data), /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _5))\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _4), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(pos, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _2))\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    pos := add(pos, 256)\n                    srcPtr := add(srcPtr, 1)\n                }\n                let data_1 := sload(srcPtr)\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data_1), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(192, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(160, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(128, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 96, data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1, data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(shl(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x20, data_1), shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    abi_encode_bytes4(/** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ and(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ data_1, shl(224, 0xffffffff)), pos)\n                    pos := add(pos, 0x20)\n                }\n                finalize_allocation(memPtr, sub(pos, memPtr))\n            }\n            function allocate_and_zero_memory_array_array_string_dyn() -> memPtr\n            {\n                let _1 := 64\n                let memPtr_1 := mload(_1)\n                finalize_allocation_12873(memPtr_1)\n                mstore(memPtr_1, /** @src 23:655:656  \"2\" */ 0x02)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                memPtr := memPtr_1\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                for { } lt(i, _1) { i := add(i, 0x20) }\n                {\n                    mstore(add(add(memPtr_1, i), 0x20), 96)\n                }\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x4e487b71))\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function memory_array_index_access_string_dyn(baseRef) -> addr\n            {\n                if iszero(mload(baseRef)) { panic_error_0x32() }\n                addr := add(baseRef, 32)\n            }\n            function memory_array_index_access_string_dyn_8110(baseRef) -> addr\n            {\n                if iszero(lt(/** @src 23:729:730  \"1\" */ 0x01, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(baseRef))) { panic_error_0x32() }\n                addr := add(baseRef, 64)\n            }\n            function copy_literal_to_memory_b4f7998b245301fa1dfc784b03961989df486af3dd1e44f88da79ca40cf5125f() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_8084(memPtr_1)\n                mstore(memPtr_1, 5)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"forge\")\n            }\n            function copy_literal_to_memory_f0950308146d69442dd345d3aff2798a958898d3248a38a46583814025e0ad99() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_8084(memPtr_1)\n                mstore(memPtr_1, 9)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"--version\")\n            }\n            /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n            function abi_decode_bytes_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(0, 0)\n                }\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                let offset := mload(headStart)\n                let _1 := 0xffffffffffffffff\n                if gt(offset, _1)\n                {\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(0, 0)\n                }\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                let _2 := add(headStart, offset)\n                if iszero(slt(add(_2, 0x1f), dataEnd))\n                {\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                let _3 := mload(_2)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                if gt(_3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ _1)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                { panic_error_0x41() }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_3, /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 0x1f), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ not(31)), /** @src 0:1590:1604  \"Vm(VM_ADDRESS)\" */ 32))\n                mstore(memPtr, _3)\n                if gt(add(add(_2, _3), 32), dataEnd)\n                {\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:1590:1604  \"Vm(VM_ADDRESS)\"\n                copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n                value0 := memPtr\n            }\n            /// @src 23:405:407  \"11\"\n            function allocate_and_zero_memory_array_bytes() -> memPtr\n            {\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let memPtr_1 := mload(64)\n                finalize_allocation_8084(memPtr_1)\n                mstore(memPtr_1, /** @src 23:405:407  \"11\" */ 0x0b)\n                memPtr := memPtr_1\n                calldatacopy(add(memPtr_1, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x20), /** @src 23:405:407  \"11\" */ calldatasize(), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x20)\n            }\n            /// @src 23:405:407  \"11\"\n            function increment_uint256(value) -> ret\n            {\n                if eq(value, not(0))\n                {\n                    mstore(0, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x4e487b71))\n                    /// @src 23:405:407  \"11\"\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n                ret := add(value, 1)\n            }\n            function memory_array_index_access_bytes(baseRef, index) -> addr\n            {\n                if iszero(lt(index, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(/** @src 23:405:407  \"11\" */ baseRef))) { panic_error_0x32() }\n                addr := add(add(baseRef, index), 32)\n            }\n            function read_from_memoryt_bytes1(ptr) -> returnValue\n            {\n                returnValue := and(mload(ptr), shl(248, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 255))\n            }\n            /// @src 23:405:407  \"11\"\n            function copy_literal_to_memory_428101d2acb3e4b07217a874d39513be1b238cb3014553ebb24bc70adb070875() -> memPtr\n            {\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let memPtr_1 := mload(64)\n                finalize_allocation_8084(memPtr_1)\n                mstore(memPtr_1, /** @src 23:405:407  \"11\" */ 18)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"Got forge version:\")\n            }\n            function convert_bytes_to_fixedbytes_from_bytes_to_bytes32(array) -> value\n            {\n                let length := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(/** @src 23:405:407  \"11\" */ array)\n                value := mload(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ add(/** @src 23:405:407  \"11\" */ array, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x20))\n                /// @src 23:405:407  \"11\"\n                if lt(length, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x20)\n                /// @src 23:405:407  \"11\"\n                {\n                    value := and(value, shl(shl(3, sub(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x20, /** @src 23:405:407  \"11\" */ length)), not(0)))\n                }\n            }\n            function copy_literal_to_memory_9bd03c442ab9d79db90ba6f4b92c82494dde4fcc0ccee6b6a63849da574b08fb() -> memPtr\n            {\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let memPtr_1 := mload(64)\n                finalize_allocation_8084(memPtr_1)\n                mstore(memPtr_1, /** @src 23:405:407  \"11\" */ 11)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"forge 0.2.0\")\n            }\n            /// @src 23:339:366  \"hex\\\"666f72676520302e322e30\\\"\"\n            function copy_literal_to_memory_043c453e2d396b508c5e1648d1a76729d12b513e96af35862192d3f30f22d96c() -> memPtr\n            {\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let memPtr_1 := mload(64)\n                finalize_allocation_8084(memPtr_1)\n                mstore(memPtr_1, /** @src 23:339:366  \"hex\\\"666f72676520302e322e30\\\"\" */ 11)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"forge 0.0.2\")\n            }\n            /// @src 23:269:296  \"hex\\\"666f72676520302e302e32\\\"\"\n            function copy_literal_to_memory_b3d585aae43c219b18f248482b593de5cb67c08e1b8dd1b29431f15ab54f72b1() -> memPtr\n            {\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let memPtr_1 := mload(64)\n                finalize_allocation_8084(memPtr_1)\n                mstore(memPtr_1, /** @src 23:269:296  \"hex\\\"666f72676520302e302e32\\\"\" */ 22)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"This is Foundry ZkSync\")\n            }\n            function copy_literal_to_memory_f609773787be4030254ed8d4a28074bf98b1ee870861bb2bc194d64ebddd66f2() -> memPtr\n            {\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let memPtr_1 := mload(64)\n                finalize_allocation_8084(memPtr_1)\n                mstore(memPtr_1, /** @src 23:269:296  \"hex\\\"666f72676520302e302e32\\\"\" */ 23)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"This is Vanilla Foundry\")\n            }\n            function copy_literal_to_memory_694a8106b7821ed82fe7a838a3ec0ab4ef0859dfa95b4ef1d84a9c8b76c6666b() -> memPtr\n            {\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                let memPtr_1 := mload(64)\n                finalize_allocation_8084(memPtr_1)\n                mstore(memPtr_1, /** @src 23:269:296  \"hex\\\"666f72676520302e302e32\\\"\" */ 21)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"Unknown forge version\")\n            }\n            /// @ast-id 46895 @src 23:543:1603  \"function is_foundry_zksync() public returns (bool) {...\"\n            function fun_is_foundry_zksync() -> var\n            {\n                /// @src 23:588:592  \"bool\"\n                var := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0\n                /// @src 23:588:592  \"bool\"\n                let var_1 := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0\n                /// @src 23:642:657  \"new string[](2)\"\n                let expr_mpos := allocate_and_zero_memory_array_array_string_dyn()\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(/** @src 23:667:699  \"forgeVersionCommand[0] = \\\"forge\\\"\" */ memory_array_index_access_string_dyn(expr_mpos), copy_literal_to_memory_b4f7998b245301fa1dfc784b03961989df486af3dd1e44f88da79ca40cf5125f())\n                pop(memory_array_index_access_string_dyn(expr_mpos))\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(/** @src 23:709:745  \"forgeVersionCommand[1] = \\\"--version\\\"\" */ memory_array_index_access_string_dyn_8110(expr_mpos), copy_literal_to_memory_f0950308146d69442dd345d3aff2798a958898d3248a38a46583814025e0ad99())\n                pop(memory_array_index_access_string_dyn_8110(expr_mpos))\n                /// @src 23:778:805  \"vm.ffi(forgeVersionCommand)\"\n                let _1 := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 23:778:805  \"vm.ffi(forgeVersionCommand)\"\n                mstore(_1, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x89160467))\n                /// @src 23:778:805  \"vm.ffi(forgeVersionCommand)\"\n                let _2 := call(gas(), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d, var_1, /** @src 23:778:805  \"vm.ffi(forgeVersionCommand)\" */ _1, sub(abi_encode_array_string_dyn(add(_1, 4), expr_mpos), _1), _1, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ var_1)\n                /// @src 23:778:805  \"vm.ffi(forgeVersionCommand)\"\n                if iszero(_2) { revert_forward() }\n                let expr_46798_mpos := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ var_1\n                /// @src 23:778:805  \"vm.ffi(forgeVersionCommand)\"\n                if _2\n                {\n                    let _3 := returndatasize()\n                    returndatacopy(_1, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ var_1, /** @src 23:778:805  \"vm.ffi(forgeVersionCommand)\" */ _3)\n                    finalize_allocation(_1, _3)\n                    expr_46798_mpos := abi_decode_bytes_fromMemory(_1, add(_1, _3))\n                }\n                /// @src 23:833:840  \"retData\"\n                fun_logBytes(expr_46798_mpos)\n                /// @src 23:888:912  \"new bytes(PREFIX_LENGTH)\"\n                let expr_46811_mpos := allocate_and_zero_memory_array_bytes()\n                /// @src 23:927:940  \"uint256 i = 0\"\n                let var_i := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ var_1\n                /// @src 23:922:1027  \"for (uint256 i = 0; i < PREFIX_LENGTH; i++) {...\"\n                for { }\n                /** @src 23:942:959  \"i < PREFIX_LENGTH\" */ lt(var_i, /** @src 23:405:407  \"11\" */ 0x0b)\n                /// @src 23:927:940  \"uint256 i = 0\"\n                {\n                    /// @src 23:961:964  \"i++\"\n                    var_i := increment_uint256(var_i)\n                }\n                {\n                    /// @src 23:980:1016  \"forgeVersionPrefixed[i] = retData[i]\"\n                    mstore8(memory_array_index_access_bytes(expr_46811_mpos, var_i), byte(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ var_1, /** @src 23:1006:1016  \"retData[i]\" */ read_from_memoryt_bytes1(memory_array_index_access_bytes(expr_46798_mpos, var_i))))\n                }\n                /// @src 23:1107:1159  \"console2.log(\\\"Got forge version:\\\", forgePrefixedStr)\"\n                fun_log_24682(/** @src 23:405:407  \"11\" */ copy_literal_to_memory_428101d2acb3e4b07217a874d39513be1b238cb3014553ebb24bc70adb070875(), /** @src 23:1069:1097  \"string(forgeVersionPrefixed)\" */ expr_46811_mpos)\n                /// @src 23:1174:1203  \"bytes32(forgeVersionPrefixed)\"\n                let expr := convert_bytes_to_fixedbytes_from_bytes_to_bytes32(expr_46811_mpos)\n                /// @src 23:1170:1488  \"if (bytes32(forgeVersionPrefixed) == bytes32(FORGE_VERSION_0_2_0)) {...\"\n                switch /** @src 23:1174:1235  \"bytes32(forgeVersionPrefixed) == bytes32(FORGE_VERSION_0_2_0)\" */ eq(expr, /** @src 23:1207:1235  \"bytes32(FORGE_VERSION_0_2_0)\" */ convert_bytes_to_fixedbytes_from_bytes_to_bytes32(/** @src 23:405:407  \"11\" */ copy_literal_to_memory_9bd03c442ab9d79db90ba6f4b92c82494dde4fcc0ccee6b6a63849da574b08fb()))\n                case /** @src 23:1170:1488  \"if (bytes32(forgeVersionPrefixed) == bytes32(FORGE_VERSION_0_2_0)) {...\" */ 0 {\n                    /// @src 23:1337:1366  \"bytes32(forgeVersionPrefixed)\"\n                    let expr_1 := convert_bytes_to_fixedbytes_from_bytes_to_bytes32(expr_46811_mpos)\n                    /// @src 23:1333:1488  \"if (bytes32(forgeVersionPrefixed) == bytes32(FORGE_VERSION_0_0_2)) {...\"\n                    if /** @src 23:1337:1398  \"bytes32(forgeVersionPrefixed) == bytes32(FORGE_VERSION_0_0_2)\" */ eq(expr_1, /** @src 23:1370:1398  \"bytes32(FORGE_VERSION_0_0_2)\" */ convert_bytes_to_fixedbytes_from_bytes_to_bytes32(/** @src 23:339:366  \"hex\\\"666f72676520302e322e30\\\"\" */ copy_literal_to_memory_043c453e2d396b508c5e1648d1a76729d12b513e96af35862192d3f30f22d96c()))\n                    /// @src 23:1333:1488  \"if (bytes32(forgeVersionPrefixed) == bytes32(FORGE_VERSION_0_0_2)) {...\"\n                    {\n                        /// @src 23:1414:1452  \"console2.log(\\\"This is Foundry ZkSync\\\")\"\n                        fun_log(/** @src 23:269:296  \"hex\\\"666f72676520302e302e32\\\"\" */ copy_literal_to_memory_b3d585aae43c219b18f248482b593de5cb67c08e1b8dd1b29431f15ab54f72b1())\n                        /// @src 23:1466:1477  \"return true\"\n                        var := /** @src 23:729:730  \"1\" */ 0x01\n                        /// @src 23:1466:1477  \"return true\"\n                        leave\n                    }\n                }\n                default /// @src 23:1170:1488  \"if (bytes32(forgeVersionPrefixed) == bytes32(FORGE_VERSION_0_2_0)) {...\"\n                {\n                    /// @src 23:1251:1290  \"console2.log(\\\"This is Vanilla Foundry\\\")\"\n                    fun_log(/** @src 23:269:296  \"hex\\\"666f72676520302e302e32\\\"\" */ copy_literal_to_memory_f609773787be4030254ed8d4a28074bf98b1ee870861bb2bc194d64ebddd66f2())\n                    /// @src 23:1304:1316  \"return false\"\n                    var := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ var_1\n                    /// @src 23:1304:1316  \"return false\"\n                    leave\n                }\n                /// @src 23:1497:1534  \"console2.log(\\\"Unknown forge version\\\")\"\n                fun_log(/** @src 23:269:296  \"hex\\\"666f72676520302e302e32\\\"\" */ copy_literal_to_memory_694a8106b7821ed82fe7a838a3ec0ab4ef0859dfa95b4ef1d84a9c8b76c6666b())\n                /// @src 23:1551:1596  \"FoundryZkSyncChecker__UnknownFoundryVersion()\"\n                let _4 := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 23:1551:1596  \"FoundryZkSyncChecker__UnknownFoundryVersion()\"\n                mstore(_4, shl(231, 0x01b3ab1b))\n                revert(_4, /** @src 23:778:805  \"vm.ffi(forgeVersionCommand)\" */ 4)\n            }\n            /// @ast-id 24045 @src 15:2125:2249  \"function logBytes(bytes memory p0) internal pure {...\"\n            function fun_logBytes(var_p0_mpos)\n            {\n                /// @src 15:2200:2241  \"abi.encodeWithSignature(\\\"log(bytes)\\\", p0)\"\n                let expr_24041_mpos := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 15:2200:2241  \"abi.encodeWithSignature(\\\"log(bytes)\\\", p0)\"\n                mstore(add(expr_24041_mpos, 0x20), shl(225, 0x05f3bfab))\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(/** @src 15:2200:2241  \"abi.encodeWithSignature(\\\"log(bytes)\\\", p0)\" */ add(expr_24041_mpos, 36), 0x20)\n                let _1 := sub(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string(var_p0_mpos, add(/** @src 15:2200:2241  \"abi.encodeWithSignature(\\\"log(bytes)\\\", p0)\" */ expr_24041_mpos, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 68)), /** @src 15:2200:2241  \"abi.encodeWithSignature(\\\"log(bytes)\\\", p0)\" */ expr_24041_mpos)\n                mstore(expr_24041_mpos, add(_1, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ not(31)))\n                /// @src 15:2200:2241  \"abi.encodeWithSignature(\\\"log(bytes)\\\", p0)\"\n                finalize_allocation(expr_24041_mpos, _1)\n                fun_sendLogPayload(expr_24041_mpos)\n            }\n            /// @ast-id 23934 @src 15:868:1001  \"function _sendLogPayload(bytes memory payload) internal pure {...\"\n            function fun_sendLogPayload(var_payload_mpos)\n            {\n                /// @src 15:1222:1381  \"assembly {...\"\n                pop(staticcall(gas(), /** @src 15:591:633  \"0x000000000000000000636F6e736F6c652e6c6f67\" */ 0x636f6e736f6c652e6c6f67, /** @src 15:1222:1381  \"assembly {...\" */ add(var_payload_mpos, 32), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(/** @src 15:1105:1119  \"payload.length\" */ var_payload_mpos), /** @src 15:1222:1381  \"assembly {...\" */ 0, 0))\n            }\n            /// @ast-id 24535 @src 15:6598:6719  \"function log(string memory p0) internal pure {...\"\n            function fun_log(var_p0_24523_mpos)\n            {\n                /// @src 15:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                let expr_24531_mpos := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 15:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                mstore(add(expr_24531_mpos, 0x20), shl(226, 0x104c13eb))\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(/** @src 15:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ add(expr_24531_mpos, 36), 0x20)\n                let _1 := sub(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string(var_p0_24523_mpos, add(/** @src 15:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_24531_mpos, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 68)), /** @src 15:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\" */ expr_24531_mpos)\n                mstore(expr_24531_mpos, add(_1, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ not(31)))\n                /// @src 15:6669:6711  \"abi.encodeWithSignature(\\\"log(string)\\\", p0)\"\n                finalize_allocation(expr_24531_mpos, _1)\n                fun_sendLogPayload(expr_24531_mpos)\n            }\n            /// @ast-id 24682 @src 15:7846:7996  \"function log(string memory p0, string memory p1) internal pure {...\"\n            function fun_log_24682(var_p0_24667_mpos, var_p1_mpos)\n            {\n                /// @src 15:7935:7988  \"abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\"\n                let expr_24678_mpos := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ mload(64)\n                /// @src 15:7935:7988  \"abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\"\n                mstore(add(expr_24678_mpos, 0x20), shl(224, 0x4b5c4277))\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(/** @src 15:7935:7988  \"abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\" */ add(expr_24678_mpos, 36), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 64)\n                let tail := abi_encode_string(var_p0_24667_mpos, add(/** @src 15:7935:7988  \"abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\" */ expr_24678_mpos, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 100))\n                mstore(add(/** @src 15:7935:7988  \"abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\" */ expr_24678_mpos, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 68), add(sub(tail, /** @src 15:7935:7988  \"abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\" */ expr_24678_mpos), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ not(35)))\n                /// @src 15:7935:7988  \"abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\"\n                let _1 := sub(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ abi_encode_string(var_p1_mpos, tail), /** @src 15:7935:7988  \"abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\" */ expr_24678_mpos)\n                mstore(expr_24678_mpos, add(_1, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ not(31)))\n                /// @src 15:7935:7988  \"abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1)\"\n                finalize_allocation(expr_24678_mpos, _1)\n                fun_sendLogPayload(expr_24678_mpos)\n            }\n            /// @ast-id 46961 @src 24:291:623  \"function isOnZkSyncChainId() public view returns (bool) {...\"\n            function fun_isOnZkSyncChainId() -> var_\n            {\n                /// @src 24:480:558  \"block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId\"\n                let expr := /** @src 24:480:517  \"block.chainid == zkSyncMainnetChainId\" */ eq(/** @src 24:480:493  \"block.chainid\" */ chainid(), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ sload(/** @src 24:497:517  \"zkSyncMainnetChainId\" */ 0x1f))\n                /// @src 24:480:558  \"block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId\"\n                if iszero(expr)\n                {\n                    expr := /** @src 24:521:558  \"block.chainid == zkSyncSepoliaChainId\" */ eq(/** @src 24:480:493  \"block.chainid\" */ chainid(), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ sload(/** @src 24:538:558  \"zkSyncSepoliaChainId\" */ 0x20))\n                }\n                /// @src 24:480:616  \"block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId...\"\n                let expr_1 := expr\n                if iszero(expr)\n                {\n                    expr_1 := /** @src 24:574:616  \"block.chainid == zkSyncInMemoryNodeChainId\" */ eq(/** @src 24:480:493  \"block.chainid\" */ chainid(), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ sload(/** @src 24:591:616  \"zkSyncInMemoryNodeChainId\" */ 0x21))\n                }\n                /// @src 24:473:616  \"return block.chainid == zkSyncMainnetChainId || block.chainid == zkSyncSepoliaChainId...\"\n                var_ := expr_1\n            }\n            /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            function memory_array_index_access_address(baseRef, index) -> addr\n            {\n                if iszero(lt(index, 0x04)) { panic_error_0x32() }\n                addr := add(baseRef, shl(5, index))\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                returnValue := and(mload(ptr), sub(shl(160, 1), 1))\n            }\n            /// @ast-id 47058 @src 24:629:1726  \"function isOnZkSyncPrecompiles() public returns (bool isZkSync) {...\"\n            function fun_isOnZkSyncPrecompiles() -> var_isZkSync\n            {\n                /// @src 24:678:691  \"bool isZkSync\"\n                var_isZkSync := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0\n                /// @src 24:678:691  \"bool isZkSync\"\n                let var_isZkSync_1 := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0\n                let memPtr := mload(64)\n                /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                let newFreePtr := add(memPtr, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 128)\n                /// @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 64, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ newFreePtr)\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                mstore(memPtr, 3)\n                let _1 := 4\n                mstore(/** @src 24:1313:1350  \"[ripemd, identity, modexp, ecPairing]\" */ add(memPtr, 32), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                mstore(/** @src 24:1313:1350  \"[ripemd, identity, modexp, ecPairing]\" */ add(memPtr, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 64), 5)\n                mstore(/** @src 24:1313:1350  \"[ripemd, identity, modexp, ecPairing]\" */ add(memPtr, 96), /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 8)\n                /// @src 24:1366:1379  \"uint256 i = 0\"\n                let var_i := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ var_isZkSync_1\n                /// @src 24:1361:1695  \"for (uint256 i = 0; i < targets.length; i++) {...\"\n                for { }\n                /** @src 24:1381:1399  \"i < targets.length\" */ lt(var_i, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ _1)\n                /// @src 24:1366:1379  \"uint256 i = 0\"\n                {\n                    /// @src 24:1401:1404  \"i++\"\n                    var_i := increment_uint256(var_i)\n                }\n                {\n                    /// @src 24:1084:1085  \"1\"\n                    let _2 := 0x01\n                    /// @src 24:1590:1685  \"if (!success) {...\"\n                    if /** @src 24:1594:1602  \"!success\" */ cleanup_bool(iszero(/** @src 24:1487:1577  \"assembly {...\" */ call(gas(), /** @src 24:1463:1473  \"targets[i]\" */ read_from_memoryt_address(memory_array_index_access_address(memPtr, var_i)), /** @src 24:1084:1085  \"1\" */ _2, /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ var_isZkSync_1, var_isZkSync_1, var_isZkSync_1, var_isZkSync_1)))\n                    /// @src 24:1590:1685  \"if (!success) {...\"\n                    {\n                        /// @src 24:1655:1670  \"return isZkSync\"\n                        var_isZkSync := /** @src 24:1084:1085  \"1\" */ _2\n                        /// @src 24:1655:1670  \"return isZkSync\"\n                        leave\n                    }\n                }\n                /// @src 24:1704:1719  \"return isZkSync\"\n                var_isZkSync := var_isZkSync\n            }\n            /// @ast-id 47073 @src 24:1732:1909  \"function isZkSyncChain() public returns (bool isZkSync) {...\"\n            function fun_isZkSyncChain() -> var_isZkSync\n            {\n                /// @src 24:1798:1863  \"if (isOnZkSyncChainId()) {...\"\n                if /** @src 24:1802:1821  \"isOnZkSyncChainId()\" */ fun_isOnZkSyncChainId()\n                /// @src 24:1798:1863  \"if (isOnZkSyncChainId()) {...\"\n                {\n                    /// @src 24:1837:1852  \"return isZkSync\"\n                    var_isZkSync := /** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ 0\n                    /// @src 24:1837:1852  \"return isZkSync\"\n                    leave\n                }\n                /// @src 24:1872:1902  \"return isOnZkSyncPrecompiles()\"\n                var_isZkSync := /** @src 24:1879:1902  \"isOnZkSyncPrecompiles()\" */ fun_isOnZkSyncPrecompiles()\n            }\n            /// @ast-id 47089 @src 24:1915:2105  \"modifier skipZkSync() {...\"\n            function modifier_skipZkSync()\n            {\n                /// @src 24:1947:2099  \"if (isZkSyncChain()) {...\"\n                switch /** @src 24:1951:1966  \"isZkSyncChain()\" */ fun_isZkSyncChain()\n                case /** @src 24:1947:2099  \"if (isZkSyncChain()) {...\" */ 0 {\n                    /// @src 25:747:762  \"assert(success)\"\n                    assert_helper(/** @src 25:660:738  \"assembly {...\" */ call(gas(), /** @src 25:557:558  \"3\" */ 0x03, /** @src -1:-1:-1 */ 0, 0, 0, 0, 0))\n                }\n                default /// @src 24:1947:2099  \"if (isZkSyncChain()) {...\"\n                {\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    let memPtr := mload(64)\n                    finalize_allocation_12873(memPtr)\n                    mstore(memPtr, 38)\n                    mstore(add(memPtr, 32), \"Skipping test because we are on \")\n                    mstore(add(memPtr, 64), \"zkSync\")\n                    /// @src 24:1982:2036  \"console2.log(\\\"Skipping test because we are on zkSync\\\")\"\n                    fun_log(/** @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\" */ memPtr)\n                    /// @src 24:2050:2057  \"return;\"\n                    leave\n                }\n            }\n            /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n            function assert_helper(condition)\n            {\n                if iszero(condition)\n                {\n                    mstore(0, /** @src 1:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0x4e487b71))\n                    /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                    mstore(4, 0x01)\n                    revert(0, 0x24)\n                }\n            }\n            function copy_literal_to_memory_225017b3ee6908a58acafeb7efbfa4ac059e5e6dd39344ec9cbb1ac1929b76c4() -> memPtr\n            {\n                let memPtr_1 := mload(64)\n                finalize_allocation_12873(memPtr_1)\n                mstore(memPtr_1, 37)\n                memPtr := memPtr_1\n                mstore(add(memPtr_1, 32), \"Only foundry works with this fun\")\n                mstore(add(memPtr_1, 64), \"ction\")\n            }\n            function abi_decode_bool_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                let value := mload(headStart)\n                if iszero(eq(value, iszero(iszero(value))))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 25:277:1171  \"contract ZkSyncDevOps is Test, ZkSyncChainChecker, FoundryZkSyncChecker {...\"\n                value0 := value\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000813000a\"\n    }\n}\n","hash":"010002ef71ac1cbcf871d06dcd85fb82b911857e9e0ec4e0d01a11f3326c1752","factoryDependencies":{},"id":25}