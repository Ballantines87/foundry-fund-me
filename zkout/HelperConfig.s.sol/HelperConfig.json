{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"HelperConfig.s.sol:HelperConfig\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[4]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_9\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_99\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_24[0], r1, r2\n\tjump.gt\t@.BB0_15\n\tsub.s!\t@CPI0_31[0], r1, r2\n\tjump.le\t@.BB0_23\n\tsub.s!\t@CPI0_32[0], r1, r2\n\tjump.eq\t@.BB0_40\n\tsub.s!\t@CPI0_33[0], r1, r2\n\tjump.eq\t@.BB0_42\n\tsub.s!\t@CPI0_34[0], r1, r1\n\tjump.ne\t@.BB0_99\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_99\n\tadd\t@CPI0_16[0], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_38[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_9:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_99\n\tadd\t12, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_1[0], r2, r2\n\tor\t@CPI0_2[0], r2, r2\n\tsstore\tr1, r2\n\tadd\t@CPI0_3[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t32779, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_100\n\tld.1\t64, r2\n\tld\tr1, r1\n\tsub.s!\t@CPI0_5[0], r1, r1\n\tjump.ne\t@.BB0_21\n\tsub.s!\t@CPI0_8[0], r2, r1\n\tjump.gt\t@.BB0_22\n\tadd\t32, r2, r1\n\tst.1\t64, r1\n\tst.1\tr2, r0\n\tld.1\t64, r2\n\tsub.s!\t@CPI0_8[0], r2, r1\n\tjump.gt\t@.BB0_22\n\tadd\t32, r2, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_21[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t13, r0, r2\n\tsload\tr2, r2\n\tjump\t@.BB0_65\n.BB0_15:\n\tsub.s!\t@CPI0_25[0], r1, r2\n\tjump.le\t@.BB0_27\n\tsub.s!\t@CPI0_26[0], r1, r2\n\tjump.eq\t@.BB0_44\n\tsub.s!\t@CPI0_27[0], r1, r2\n\tjump.eq\t@.BB0_46\n\tsub.s!\t@CPI0_28[0], r1, r1\n\tjump.ne\t@.BB0_99\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_99\n\tadd\t12, r0, r1\n\tsload\tr1, r1\n\tand!\t@CPI0_37[0], r1, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_38[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_21:\n\tsub.s!\t@CPI0_6[0], r2, r1\n\tjump.lt\t@.BB0_31\n.BB0_22:\n\tadd\t@CPI0_41[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_42[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_23:\n\tsub.s!\t@CPI0_35[0], r1, r2\n\tjump.eq\t@.BB0_51\n\tsub.s!\t@CPI0_36[0], r1, r1\n\tjump.ne\t@.BB0_99\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_99\n\tadd\t8, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_38[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_27:\n\tsub.s!\t@CPI0_29[0], r1, r2\n\tjump.eq\t@.BB0_61\n\tsub.s!\t@CPI0_30[0], r1, r1\n\tjump.ne\t@.BB0_99\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_99\n\tadd\t300, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_38[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_31:\n\tadd\t32, r2, r1\n\tst.1\t64, r1\n\tst.1\tr2, r0\n\tadd\t13, r0, r3\n\tsload\tr3, r2\n\tand!\t@CPI0_7[0], r2, r1\n\tjump.ne\t@.BB0_63\n\tadd\tr3, r0, stack-[4]\n\tadd\t@CPI0_9[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_10[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_11[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_100\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_99\n\tld.1\t64, r4\n\tadd\t@CPI0_12[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[3]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, stack-[2]\n\tshl.s\t192, r2, r1\n\tor\tstack-[2], r1, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t@CPI0_10[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_67\n\tadd\tstack-[3], r0, r4\n\tsub.s!\t@CPI0_14[0], r4, r1\n\tjump.gt\t@.BB0_22\n\tst.1\t64, r4\n\tsub.s!\t@CPI0_15[0], r4, r1\n\tjump.gt\t@.BB0_22\n\tadd\t164, r4, r1\n\tadd\t@CPI0_16[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t132, r4, r1\n\tadd\t8, r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tadd\t@CPI0_17[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t100, r4, r1\n\tcontext.gas_left\tr2\n\tadd\t64, r0, r3\n\tst.1\tr1, r3\n\tadd\t68, r4, r1\n\tadd\t96, r0, r3\n\tst.1\tr1, r3\n\tadd\t@CPI0_18[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tst.1\tr1, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\tstack-[2], r1, r1\n\tor\t@CPI0_19[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_78\n\tld\tr1, r2\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_83\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_79\n.BB0_40:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_99\n\tadd\t160, r0, r1\n\tst.1\t64, r1\n\tst.1\t128, r0\n\tnear_call\tr0, @finalize_allocation.1, @DEFAULT_UNWIND\n\tadd\t@CPI0_40[0], r0, r1\n\tjump\t@.BB0_48\n.BB0_42:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_99\n\tadd\t31337, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_38[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_44:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_99\n\tadd\t13, r0, r1\n\tsload\tr1, r1\n\tand\t@CPI0_7[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_38[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_46:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_99\n\tadd\t160, r0, r1\n\tst.1\t64, r1\n\tst.1\t128, r0\n\tnear_call\tr0, @finalize_allocation.1, @DEFAULT_UNWIND\n\tadd\t@CPI0_21[0], r0, r1\n.BB0_48:\n\tst.1\t160, r1\n.BB0_49:\n\tld.1\t64, r2\n.BB0_50:\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_39[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_51:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_99\n\tadd\t160, r0, r1\n\tst.1\t64, r1\n\tst.1\t128, r0\n\tadd\t13, r0, r1\n\tsload\tr1, r1\n\tand!\t@CPI0_7[0], r1, r1\n\tjump.ne\t@.BB0_66\n\tadd\t@CPI0_9[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_10[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_11[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_100\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_99\n\tld.1\t64, r4\n\tadd\t@CPI0_12[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[4]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, stack-[3]\n\tshl.s\t192, r2, r1\n\tor\tstack-[3], r1, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t@CPI0_10[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_71\n\tadd\tstack-[4], r0, r4\n\tsub.s!\t@CPI0_14[0], r4, r1\n\tjump.gt\t@.BB0_22\n\tst.1\t64, r4\n\tsub.s!\t@CPI0_15[0], r4, r1\n\tjump.gt\t@.BB0_22\n\tadd\t164, r4, r1\n\tadd\t@CPI0_16[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t132, r4, r1\n\tadd\t8, r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tadd\t@CPI0_17[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t100, r4, r1\n\tcontext.gas_left\tr2\n\tadd\t64, r0, r3\n\tst.1\tr1, r3\n\tadd\t68, r4, r1\n\tadd\t96, r0, r3\n\tst.1\tr1, r3\n\tadd\t@CPI0_18[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tst.1\tr1, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\tstack-[3], r1, r1\n\tor\t@CPI0_19[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_89\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_97\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_90\n.BB0_61:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_99\n\tadd\t@CPI0_5[0], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_38[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_63:\n\tld.1\t64, r3\n\tsub.s!\t@CPI0_8[0], r3, r4\n\tjump.gt\t@.BB0_22\n\tadd\t32, r3, r4\n\tst.1\t64, r4\n\tst.1\tr3, r1\n.BB0_65:\n\tand\t@CPI0_22[0], r2, r2\n\tor\tr2, r1, r1\n\tadd\t13, r0, r2\n\tsstore\tr2, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_23[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_66:\n\tadd\t192, r0, r2\n\tst.1\t64, r2\n\tst.1\t160, r1\n\tjump\t@.BB0_50\n.BB0_67:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_70\n\tadd\tr0, r0, r6\n.BB0_69:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_69\n.BB0_70:\n\tsub!\tr4, r0, r6\n\tjump.ne\t@.BB0_76\n\tjump\t@.BB0_77\n.BB0_71:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_74\n\tadd\tr0, r0, r6\n.BB0_73:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_73\n.BB0_74:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_77\n.BB0_76:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_77:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_78:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_79:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_82\n\tadd\tr0, r0, r6\n.BB0_81:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_81\n.BB0_82:\n\tsub!\tr4, r0, r6\n\tjump.ne\t@.BB0_95\n\tjump\t@.BB0_96\n.BB0_83:\n\tadd\tr2, r0, stack-[3]\n\tadd\t@CPI0_9[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_10[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_11[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_100\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_99\n\tld.1\t64, r4\n\tadd\t@CPI0_20[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[1]\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[2]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t@CPI0_10[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_101\n\tadd\tstack-[2], r0, r1\n\tsub.s!\t@CPI0_14[0], r1, r1\n\tjump.gt\t@.BB0_22\n\tadd\tstack-[2], r0, r1\n\tst.1\t64, r1\n\tsub.s!\t@CPI0_8[0], r1, r1\n\tjump.gt\t@.BB0_22\n\tadd\tstack-[1], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[3], r0, r1\n\tand\t@CPI0_7[0], r1, r1\n\tadd\tstack-[2], r0, r2\n\tst.1\tr2, r1\n\tadd\tstack-[4], r0, r2\n\tsload\tr2, r2\n\tjump\t@.BB0_65\n.BB0_89:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_90:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_93\n\tadd\tr0, r0, r6\n.BB0_92:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_92\n.BB0_93:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_96\n.BB0_95:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_96:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_97:\n\tadd\t@CPI0_9[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_10[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_11[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_100\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_106\n.BB0_99:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_100:\n\trevert\n.BB0_101:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_104\n\tadd\tr0, r0, r6\n.BB0_103:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_103\n.BB0_104:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_77\n\tjump\t@.BB0_76\n.BB0_106:\n\tld.1\t64, r4\n\tadd\t@CPI0_20[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[2]\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[3]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_13[0], r1, r1\n\tadd\t@CPI0_10[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_110\n\tadd\tstack-[3], r0, r1\n\tsub.s!\t@CPI0_14[0], r1, r1\n\tjump.gt\t@.BB0_22\n\tadd\tstack-[3], r0, r1\n\tst.1\t64, r1\n\tsub.s!\t@CPI0_8[0], r1, r1\n\tjump.gt\t@.BB0_22\n\tadd\tstack-[2], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[4], r0, r1\n\tand\t@CPI0_7[0], r1, r1\n\tadd\tstack-[3], r0, r2\n\tst.1\tr2, r1\n\tjump\t@.BB0_49\n.BB0_110:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_113\n\tadd\tr0, r0, r6\n.BB0_112:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_112\n.BB0_113:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_77\n\tjump\t@.BB0_76\n.func_end0:\n\nfinalize_allocation.1:\n.func_begin1:\n\tsub.s!\t@CPI1_0[0], r1, r2\n\tjump.ge\t@.BB1_1\n\tadd\t32, r1, r1\n\tst.1\t64, r1\n\tret\n.BB1_1:\n\tadd\t@CPI1_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\n__cxa_throw:\n.func_begin2:\n\trevert\n.func_end2:\n\n__farcall:\n.func_begin3:\n.tmp0:\n\tfar_call\tr1, r2, @.BB3_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB3_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end3:\n\n__staticcall:\n.func_begin4:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB4_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB4_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end4:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell -16711936\nCPI0_2:\n\t.cell 65537\nCPI0_3:\n\t.cell -45892047197499416867505091379861151366373029554911521591129889233172042914037\nCPI0_4:\n\t.cell 904625751086426111047927909714404454142933102791518401696464687643217625088\nCPI0_5:\n\t.cell 11155111\nCPI0_6:\nCPI1_0:\n\t.cell 18446744073709551584\nCPI0_7:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_8:\n\t.cell 18446744073709551583\nCPI0_9:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_10:\n\t.cell 645326474426547203313410069153905908525362434349\nCPI0_11:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_12:\n\t.cell 57763817484313164028313283939489504447484577087939811246371138302511295758336\nCPI0_13:\n\t.cell 316912650057057350374175801344\nCPI0_14:\n\t.cell 18446744073709551615\nCPI0_15:\n\t.cell 18446744073709551483\nCPI0_16:\n\t.cell 200000000000\nCPI0_17:\n\t.cell 452316774157734339484478049780522535903342047341731170006166457347352615487\nCPI0_18:\n\t.cell -45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_19:\n\t.cell 904625697166532776746648320380374280103671770729036759354072543396435591168\nCPI0_20:\n\t.cell 53787885087763336501906314510680303380505312860176240795757540877198344323072\nCPI0_21:\n\t.cell 601108351508397648193079465881173507310720537350\nCPI0_22:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_23:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_24:\n\t.cell 3092043087\nCPI0_25:\n\t.cell 3619051332\nCPI0_26:\n\t.cell 3619051333\nCPI0_27:\n\t.cell 3967147081\nCPI0_28:\n\t.cell 4174167879\nCPI0_29:\n\t.cell 3092043088\nCPI0_30:\n\t.cell 3347811467\nCPI0_31:\n\t.cell 1559971413\nCPI0_32:\n\t.cell 1559971414\nCPI0_33:\n\t.cell 1974387320\nCPI0_34:\n\t.cell 2086545301\nCPI0_35:\n\t.cell 311430568\nCPI0_36:\n\t.cell 772744741\nCPI0_37:\n\t.cell 16711680\nCPI0_38:\n\t.cell 2535301202817642044428229017600\nCPI0_39:\n\t.cell 2535301200456458802993406410752\nCPI0_40:\n\t.cell 544110644340816939372220746866710871299132720153\nCPI0_41:\nCPI1_1:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_42:\nCPI1_2:\n\t.cell 2852213850513516153367582212096\n","methodIdentifiers":{"DECIMALS()":"2e0f2625","ETH_SEPOLIA_CHAIN_ID()":"b84cd550","INITIAL_PRICE()":"7c5e2795","IS_SCRIPT()":"f8ccbf47","LOCAL_CHAIN_ID()":"75aec278","ZKSYNC_SEPOLIA_CHAIN_ID()":"c78b8c8b","activeNetworkConfig()":"d7b65745","getMainnetEthConfig()":"5cfb4656","getOrCreateAnvilEthConfig()":"12900da8","getSepoliaEthConfig()":"ec75dc49"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.580a8fe5\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_SEPOLIA_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_PRICE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCAL_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZKSYNC_SEPOLIA_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeNetworkConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMainnetEthConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"internalType\":\"struct NetworkConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrCreateAnvilEthConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"internalType\":\"struct NetworkConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSepoliaEthConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"internalType\":\"struct NetworkConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"script/HelperConfig.s.sol\":\"HelperConfig\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOc\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/\"]},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://644cff84052e1e82b5bb502b2a46e8f142a62b0db4cd9b38200798ba8373c6f7\",\"dweb:/ipfs/QmTa99QHrJBn3SXDizquPBUiTxVCNKQrHgaWJhuds5Sce2\"]},\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x2315be74cc2826f9da401bea3da46a10ad6a6efdf73176d79160b453286d0ed2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af0d4dc826911d6cb4d6272ed5cbdb6950e1476141cca328e178b808d848789c\",\"dweb:/ipfs/QmV2ytjUEkV84VtdMs1nZqQTBoVE987cHboQMpiha5yo3e\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x2ba8ee7e4a68efd4cd75331b229874f4d4dc0a1010599afad88fc2cae5cb5d4a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77ce1968d402b0414fec0a344b59c275d0706d4df5ac6293d605dd2202016345\",\"dweb:/ipfs/QmSVy4N4F15NzEuSpmvwRj1nTfAwaJpng7CywUBWLnWC4w\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x651d84d948832f0ef45686417aa68ffb871378fa788a4123dbf37844903c66f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff20f5ac9de3dc3ba86b1bf1f2723174e82ce3499ad67cb0ccfa7d28baeee678\",\"dweb:/ipfs/QmRZkUFKz7AmF7yk6o317sk822HHhGVPXZQgX8G4LfYfft\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xf92ea94fe38f8370a8dc5f591ebfb4958869e18d877469ce422162cc88c8b063\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://620b5d4b2ff24d66120ce9dbb72fbde7276f2e8b3bb93f626874183aee01e307\",\"dweb:/ipfs/Qmcyc8co7vCiJ7gUd3jj5Hc1rRPihjt3WSKs5ut6eiU1Ze\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0x3293dcbb7acd28df553c954e4e39e288bf10aab7ecda8d50ef21b4f4a91a28d9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eb374daf6df34f4392f8926f1fddbce9f22c423066aeaefdfbe77395f77967b\",\"dweb:/ipfs/QmWR81zBJRX2uyRjveGzikYPj6ZwKppWsU49YEQXTLWUsN\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"script/HelperConfig.s.sol\":{\"keccak256\":\"0x4275781637148f7806227f4d52f9ea832ac1fe7ff4bd712f350301d2d0606da6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://22016debd7c3e2a10ad0e9b6ec585dfdfbcb3de4de4c2ea87bf31130ce491569\",\"dweb:/ipfs/QmZsntiQEZn6Z8akALQQ9GUzQbjUs14g3Tkr5nvuywzy2z\"]},\"test/mocks/MockV3Aggregator.sol\":{\"keccak256\":\"0x4795949d594ed6bfc89da34cef3c56f6c50c7440c06ef92a5051115acd345b3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c235c58157ca00ff1ab29299f4e3d0d337bcc9200c9c26b41da3a78522b6220\",\"dweb:/ipfs/QmSYBtpQbhQHXGMgDzoNTYrLthUfpNSQQvdFF8wrAho7jj\"]}},\"version\":1}","solc_version":"0.8.19","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 2:\"lib/forge-std/src/Base.sol\", 3:\"lib/forge-std/src/Script.sol\", 5:\"lib/forge-std/src/StdChains.sol\", 6:\"lib/forge-std/src/StdCheats.sol\", 14:\"lib/forge-std/src/StdUtils.sol\", 31:\"script/HelperConfig.s.sol\"\nobject \"HelperConfig_47849\" {\n    code {\n        {\n            /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            sstore(/** @src 5:3166:3170  \"true\" */ 0x0c, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ or(and(sload(/** @src 5:3166:3170  \"true\" */ 0x0c), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ not(16711935)), 65537))\n            /// @src 31:963:1142  \"if (block.chainid == 11155111) {...\"\n            switch /** @src 31:967:992  \"block.chainid == 11155111\" */ eq(/** @src 31:967:980  \"block.chainid\" */ chainid(), /** @src 31:984:992  \"11155111\" */ 0xaa36a7)\n            case /** @src 31:963:1142  \"if (block.chainid == 11155111) {...\" */ 0 {\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                sstore(/** @src 31:1082:1131  \"activeNetworkConfig = getOrCreateAnvilEthConfig()\" */ 0x0d, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ or(and(sload(/** @src 31:1082:1131  \"activeNetworkConfig = getOrCreateAnvilEthConfig()\" */ 0x0d), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ not(sub(shl(160, 1), 1))), and(mload(/** @src 31:1104:1131  \"getOrCreateAnvilEthConfig()\" */ fun_getOrCreateAnvilEthConfig()), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ sub(shl(160, 1), 1))))\n            }\n            default /// @src 31:963:1142  \"if (block.chainid == 11155111) {...\"\n            {\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                let memPtr := mload(64)\n                finalize_allocation_1149(memPtr)\n                mstore(memPtr, 0)\n                let memPtr_1 := mload(64)\n                finalize_allocation_1149(memPtr_1)\n                /// @src 31:1349:1391  \"0x694AA1769357215DE4FAC081bf1f309aDC325306\"\n                let _1 := 0x694aa1769357215de4fac081bf1f309adc325306\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                mstore(memPtr_1, /** @src 31:1349:1391  \"0x694AA1769357215DE4FAC081bf1f309aDC325306\" */ _1)\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                sstore(/** @src 31:1008:1051  \"activeNetworkConfig = getSepoliaEthConfig()\" */ 0x0d, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ or(and(sload(/** @src 31:1008:1051  \"activeNetworkConfig = getSepoliaEthConfig()\" */ 0x0d), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ not(sub(shl(160, 1), 1))), /** @src 31:1349:1391  \"0x694AA1769357215DE4FAC081bf1f309aDC325306\" */ _1))\n            }\n            /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n            let _2 := mload(64)\n            let _3 := datasize(\"HelperConfig_47849_deployed\")\n            codecopy(_2, dataoffset(\"HelperConfig_47849_deployed\"), _3)\n            return(_2, _3)\n        }\n        function finalize_allocation_1149(memPtr)\n        {\n            let newFreePtr := add(memPtr, 32)\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n        function finalize_allocation(memPtr)\n        {\n            if gt(memPtr, sub(shl(64, 1), 1))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(64, memPtr)\n        }\n        /// @ast-id 47848 @src 31:1742:2395  \"function getOrCreateAnvilEthConfig() public returns (NetworkConfig memory) {...\"\n        function fun_getOrCreateAnvilEthConfig() -> var_mpos\n        {\n            /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n            let memPtr := /** @src -1:-1:-1 */ 0\n            /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n            let _1 := 64\n            let memPtr_1 := mload(_1)\n            finalize_allocation_1149(memPtr_1)\n            mstore(memPtr_1, /** @src -1:-1:-1 */ memPtr)\n            /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n            let _2 := sub(shl(160, 1), 1)\n            let cleaned := and(sload(/** @src 31:1831:1850  \"activeNetworkConfig\" */ 0x0d), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _2)\n            /// @src 31:1827:1927  \"if (activeNetworkConfig.priceFeed != address(0)) {...\"\n            if /** @src 31:1831:1874  \"activeNetworkConfig.priceFeed != address(0)\" */ iszero(iszero(/** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ cleaned))\n            /// @src 31:1827:1927  \"if (activeNetworkConfig.priceFeed != address(0)) {...\"\n            {\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                let memPtr_2 := mload(_1)\n                finalize_allocation_1149(memPtr_2)\n                mstore(memPtr_2, cleaned)\n                /// @src 31:1890:1916  \"return activeNetworkConfig\"\n                var_mpos := memPtr_2\n                leave\n            }\n            /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n            let _3 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n            /// @src 31:2059:2078  \"vm.startBroadcast()\"\n            if iszero(extcodesize(/** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _3))\n            /// @src 31:2059:2078  \"vm.startBroadcast()\"\n            {\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                revert(/** @src -1:-1:-1 */ memPtr, memPtr)\n            }\n            /// @src 31:2059:2078  \"vm.startBroadcast()\"\n            let _4 := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n            /// @src 31:2059:2078  \"vm.startBroadcast()\"\n            mstore(_4, /** @src 2:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x7fb5297f))\n            /// @src 31:2059:2078  \"vm.startBroadcast()\"\n            let _5 := call(gas(), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _3, /** @src -1:-1:-1 */ memPtr, /** @src 31:2059:2078  \"vm.startBroadcast()\" */ _4, 4, _4, /** @src -1:-1:-1 */ memPtr)\n            /// @src 31:2059:2078  \"vm.startBroadcast()\"\n            if iszero(_5)\n            {\n                /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                let pos := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n                /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                returndatacopy(pos, /** @src -1:-1:-1 */ memPtr, /** @src 2:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @src 31:2059:2078  \"vm.startBroadcast()\"\n            if _5\n            {\n                finalize_allocation(_4)\n                /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                memPtr := /** @src -1:-1:-1 */ memPtr\n            }\n            /// @src 31:2121:2207  \"new MockV3Aggregator(...\"\n            let _6 := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n            /// @src 31:2121:2207  \"new MockV3Aggregator(...\"\n            let _7 := datasize(\"MockV3Aggregator_48609\")\n            let _8 := add(_6, _7)\n            if or(gt(_8, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ sub(shl(64, 1), 1)), /** @src 31:2121:2207  \"new MockV3Aggregator(...\" */ lt(_8, _6))\n            {\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                mstore(memPtr, shl(224, 0x4e487b71))\n                mstore(/** @src 31:2059:2078  \"vm.startBroadcast()\" */ 4, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ 0x41)\n                revert(memPtr, 0x24)\n            }\n            /// @src 31:2121:2207  \"new MockV3Aggregator(...\"\n            datacopy(_6, dataoffset(\"MockV3Aggregator_48609\"), _7)\n            /// @src 31:879:885  \"2000e8\"\n            mstore(_8, /** @src 31:299:300  \"8\" */ 0x08)\n            /// @src 31:879:885  \"2000e8\"\n            mstore(add(_8, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ 32), /** @src 31:879:885  \"2000e8\" */ 0x2e90edd000)\n            /// @src 31:2121:2207  \"new MockV3Aggregator(...\"\n            let expr_address := create(/** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ memPtr, /** @src 31:2121:2207  \"new MockV3Aggregator(...\" */ _6, add(sub(/** @src 31:879:885  \"2000e8\" */ _8, /** @src 31:2121:2207  \"new MockV3Aggregator(...\" */ _6), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _1))\n            /// @src 31:2121:2207  \"new MockV3Aggregator(...\"\n            if iszero(expr_address)\n            {\n                /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                let pos_1 := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n                /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                returndatacopy(pos_1, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ memPtr, /** @src 2:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                revert(pos_1, returndatasize())\n            }\n            /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n            if iszero(extcodesize(/** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _3))\n            /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n            {\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                revert(memPtr, memPtr)\n            }\n            /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n            let _9 := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n            /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n            mstore(_9, /** @src 2:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(225, 0x3b756e9b))\n            /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n            let _10 := call(gas(), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _3, memPtr, /** @src 31:2217:2235  \"vm.stopBroadcast()\" */ _9, /** @src 31:2059:2078  \"vm.startBroadcast()\" */ 4, /** @src 31:2217:2235  \"vm.stopBroadcast()\" */ _9, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ memPtr)\n            /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n            if iszero(_10)\n            {\n                /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                let pos_2 := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n                /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                returndatacopy(pos_2, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ memPtr, /** @src 2:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                revert(pos_2, returndatasize())\n            }\n            /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n            if _10\n            {\n                finalize_allocation(_9)\n                /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                if memPtr\n                {\n                    /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                    revert(memPtr, memPtr)\n                }\n            }\n            let memPtr_3 := mload(_1)\n            finalize_allocation_1149(memPtr_3)\n            mstore(memPtr_3, and(/** @src 31:2323:2345  \"address(mockPriceFeed)\" */ expr_address, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _2))\n            /// @src 31:2367:2388  \"return anvilEthConfig\"\n            var_mpos := memPtr_3\n        }\n    }\n    /// @use-src 2:\"lib/forge-std/src/Base.sol\", 3:\"lib/forge-std/src/Script.sol\", 31:\"script/HelperConfig.s.sol\"\n    object \"HelperConfig_47849_deployed\" {\n        code {\n            {\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                let _1 := 64\n                mstore(_1, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _2 := 0\n                    switch shr(224, calldataload(_2))\n                    case 0x12900da8 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let ret := fun_getOrCreateAnvilEthConfig()\n                        let memPos := mload(_1)\n                        mstore(memPos, and(mload(ret), sub(shl(160, 1), 1)))\n                        return(memPos, 32)\n                    }\n                    case 0x2e0f2625 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let memPos_1 := mload(_1)\n                        mstore(memPos_1, /** @src 31:299:300  \"8\" */ 0x08)\n                        /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                        return(memPos_1, 32)\n                    }\n                    case 0x5cfb4656 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let memPtr := mload(_1)\n                        finalize_allocation(memPtr)\n                        mstore(memPtr, _2)\n                        let memPtr_1 := mload(_1)\n                        finalize_allocation(memPtr_1)\n                        /// @src 31:1643:1685  \"0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\"\n                        let _3 := 0x5f4ec3df9cbd43714fe2740f5e3616155c5b8419\n                        /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                        mstore(memPtr_1, /** @src 31:1643:1685  \"0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\" */ _3)\n                        /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                        let memPos_2 := mload(_1)\n                        mstore(memPos_2, /** @src 31:1643:1685  \"0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\" */ _3)\n                        /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                        return(memPos_2, 32)\n                    }\n                    case 0x75aec278 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let memPos_3 := mload(_1)\n                        mstore(memPos_3, /** @src 31:698:703  \"31337\" */ 0x7a69)\n                        /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                        return(memPos_3, 32)\n                    }\n                    case 0x7c5e2795 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let memPos_4 := mload(_1)\n                        mstore(memPos_4, /** @src 31:345:351  \"2000e8\" */ 0x2e90edd000)\n                        /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                        return(memPos_4, 32)\n                    }\n                    case 0xb84cd550 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let memPos_5 := mload(_1)\n                        mstore(memPos_5, /** @src 31:584:592  \"11155111\" */ 0xaa36a7)\n                        /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                        return(memPos_5, 32)\n                    }\n                    case 0xc78b8c8b {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let memPos_6 := mload(_1)\n                        mstore(memPos_6, /** @src 31:648:651  \"300\" */ 0x012c)\n                        /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                        return(memPos_6, 32)\n                    }\n                    case 0xd7b65745 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let value := and(sload(/** @src 31:892:932  \"NetworkConfig public activeNetworkConfig\" */ 13), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ sub(shl(160, 1), 1))\n                        let memPos_7 := mload(_1)\n                        mstore(memPos_7, value)\n                        return(memPos_7, 32)\n                    }\n                    case 0xec75dc49 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let memPtr_2 := mload(_1)\n                        finalize_allocation(memPtr_2)\n                        mstore(memPtr_2, _2)\n                        let memPtr_3 := mload(_1)\n                        finalize_allocation(memPtr_3)\n                        /// @src 31:1349:1391  \"0x694AA1769357215DE4FAC081bf1f309aDC325306\"\n                        let _4 := 0x694aa1769357215de4fac081bf1f309adc325306\n                        /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                        mstore(memPtr_3, /** @src 31:1349:1391  \"0x694AA1769357215DE4FAC081bf1f309aDC325306\" */ _4)\n                        /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                        let memPos_8 := mload(_1)\n                        mstore(memPos_8, /** @src 31:1349:1391  \"0x694AA1769357215DE4FAC081bf1f309aDC325306\" */ _4)\n                        /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                        return(memPos_8, 32)\n                    }\n                    case 0xf8ccbf47 {\n                        if callvalue() { revert(_2, _2) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                        let value_1 := and(shr(16, sload(/** @src 3:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ 0xff)\n                        let memPos_9 := mload(_1)\n                        mstore(memPos_9, iszero(iszero(value_1)))\n                        return(memPos_9, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function finalize_allocation(memPtr)\n            {\n                let newFreePtr := add(memPtr, 32)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation_1502(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, memPtr)\n            }\n            /// @ast-id 47848 @src 31:1742:2395  \"function getOrCreateAnvilEthConfig() public returns (NetworkConfig memory) {...\"\n            function fun_getOrCreateAnvilEthConfig() -> var_mpos\n            {\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                let memPtr := /** @src -1:-1:-1 */ 0\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                let _1 := 64\n                let memPtr_1 := mload(_1)\n                finalize_allocation(memPtr_1)\n                mstore(memPtr_1, /** @src -1:-1:-1 */ memPtr)\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                let _2 := sub(shl(160, 1), 1)\n                let value := and(sload(/** @src 31:1831:1850  \"activeNetworkConfig\" */ 0x0d), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _2)\n                /// @src 31:1827:1927  \"if (activeNetworkConfig.priceFeed != address(0)) {...\"\n                if /** @src 31:1831:1874  \"activeNetworkConfig.priceFeed != address(0)\" */ iszero(iszero(/** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ value))\n                /// @src 31:1827:1927  \"if (activeNetworkConfig.priceFeed != address(0)) {...\"\n                {\n                    /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                    let memPtr_2 := mload(_1)\n                    finalize_allocation(memPtr_2)\n                    mstore(memPtr_2, value)\n                    /// @src 31:1890:1916  \"return activeNetworkConfig\"\n                    var_mpos := memPtr_2\n                    leave\n                }\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                let _3 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 31:2059:2078  \"vm.startBroadcast()\"\n                if iszero(extcodesize(/** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _3))\n                /// @src 31:2059:2078  \"vm.startBroadcast()\"\n                {\n                    /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                    revert(/** @src -1:-1:-1 */ memPtr, memPtr)\n                }\n                /// @src 31:2059:2078  \"vm.startBroadcast()\"\n                let _4 := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n                /// @src 31:2059:2078  \"vm.startBroadcast()\"\n                mstore(_4, /** @src 2:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x7fb5297f))\n                /// @src 31:2059:2078  \"vm.startBroadcast()\"\n                let _5 := call(gas(), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _3, /** @src -1:-1:-1 */ memPtr, /** @src 31:2059:2078  \"vm.startBroadcast()\" */ _4, 4, _4, /** @src -1:-1:-1 */ memPtr)\n                /// @src 31:2059:2078  \"vm.startBroadcast()\"\n                if iszero(_5)\n                {\n                    /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                    let pos := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n                    /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                    returndatacopy(pos, /** @src -1:-1:-1 */ memPtr, /** @src 2:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                    revert(pos, returndatasize())\n                }\n                /// @src 31:2059:2078  \"vm.startBroadcast()\"\n                if _5\n                {\n                    finalize_allocation_1502(_4)\n                    /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                    memPtr := /** @src -1:-1:-1 */ memPtr\n                }\n                /// @src 31:2121:2207  \"new MockV3Aggregator(...\"\n                let _6 := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n                /// @src 31:2121:2207  \"new MockV3Aggregator(...\"\n                let _7 := datasize(\"MockV3Aggregator_48609\")\n                let _8 := add(_6, _7)\n                if or(gt(_8, 0xffffffffffffffff), lt(_8, _6))\n                {\n                    /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                    mstore(memPtr, shl(224, 0x4e487b71))\n                    mstore(/** @src 31:2059:2078  \"vm.startBroadcast()\" */ 4, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ 0x41)\n                    revert(memPtr, 0x24)\n                }\n                /// @src 31:2121:2207  \"new MockV3Aggregator(...\"\n                datacopy(_6, dataoffset(\"MockV3Aggregator_48609\"), _7)\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                mstore(_8, /** @src 31:299:300  \"8\" */ 0x08)\n                /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                mstore(/** @src 31:879:885  \"2000e8\" */ add(_8, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ 32), /** @src 31:345:351  \"2000e8\" */ 0x2e90edd000)\n                /// @src 31:2121:2207  \"new MockV3Aggregator(...\"\n                let expr_address := create(/** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ memPtr, /** @src 31:2121:2207  \"new MockV3Aggregator(...\" */ _6, add(sub(/** @src 31:879:885  \"2000e8\" */ _8, /** @src 31:2121:2207  \"new MockV3Aggregator(...\" */ _6), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _1))\n                /// @src 31:2121:2207  \"new MockV3Aggregator(...\"\n                if iszero(expr_address)\n                {\n                    /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                    let pos_1 := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n                    /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                    returndatacopy(pos_1, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ memPtr, /** @src 2:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                    revert(pos_1, returndatasize())\n                }\n                /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n                if iszero(extcodesize(/** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _3))\n                /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n                {\n                    /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                    revert(memPtr, memPtr)\n                }\n                /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n                let _9 := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n                /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n                mstore(_9, /** @src 2:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(225, 0x3b756e9b))\n                /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n                let _10 := call(gas(), /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _3, memPtr, /** @src 31:2217:2235  \"vm.stopBroadcast()\" */ _9, /** @src 31:2059:2078  \"vm.startBroadcast()\" */ 4, /** @src 31:2217:2235  \"vm.stopBroadcast()\" */ _9, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ memPtr)\n                /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n                if iszero(_10)\n                {\n                    /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                    let pos_2 := /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ mload(_1)\n                    /// @src 2:1590:1604  \"Vm(VM_ADDRESS)\"\n                    returndatacopy(pos_2, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ memPtr, /** @src 2:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                    revert(pos_2, returndatasize())\n                }\n                /// @src 31:2217:2235  \"vm.stopBroadcast()\"\n                if _10\n                {\n                    finalize_allocation_1502(_9)\n                    /// @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\"\n                    if memPtr { revert(memPtr, memPtr) }\n                }\n                let memPtr_3 := mload(_1)\n                finalize_allocation(memPtr_3)\n                mstore(memPtr_3, and(/** @src 31:2323:2345  \"address(mockPriceFeed)\" */ expr_address, /** @src 31:787:2397  \"contract HelperConfig is Script, CodeConstants {...\" */ _2))\n                /// @src 31:2367:2388  \"return anvilEthConfig\"\n                var_mpos := memPtr_3\n            }\n        }\n        /// @use-src 0:\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\", 36:\"test/mocks/MockV3Aggregator.sol\"\n        object \"MockV3Aggregator_48609\" {\n            code {\n                {\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    let _1 := memoryguard(0x80)\n                    if callvalue() { revert(0, 0) }\n                    let programSize := datasize(\"MockV3Aggregator_48609\")\n                    let argSize := sub(codesize(), programSize)\n                    let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n                    if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ 0x24)\n                    }\n                    let _2 := 64\n                    mstore(_2, newFreePtr)\n                    codecopy(_1, programSize, argSize)\n                    if slt(sub(add(_1, argSize), _1), _2)\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    let value := mload(_1)\n                    let _3 := and(value, 0xff)\n                    if iszero(eq(value, _3))\n                    {\n                        revert(/** @src -1:-1:-1 */ 0, 0)\n                    }\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    let value_1 := mload(add(_1, 32))\n                    /// @src -1:-1:-1\n                    let _4 := 0\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    sstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ or(and(sload(/** @src -1:-1:-1 */ _4), /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ not(255)), _3))\n                    sstore(1, value_1)\n                    sstore(/** @src 36:1031:1064  \"latestTimestamp = block.timestamp\" */ 0x02, /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    let _5 := sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03)\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    if eq(_5, not(0))\n                    {\n                        mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x11)\n                        revert(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ 0x24)\n                    }\n                    let ret := add(_5, 1)\n                    sstore(/** @src 36:1074:1087  \"latestRound++\" */ 0x03, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ ret)\n                    mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ ret)\n                    mstore(32, /** @src 36:1097:1106  \"getAnswer\" */ 0x04)\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    sstore(keccak256(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _2), value_1)\n                    mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    mstore(32, /** @src 36:1139:1151  \"getTimestamp\" */ 0x05)\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    sstore(keccak256(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    mstore(32, /** @src 36:1192:1204  \"getStartedAt\" */ 0x06)\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    sstore(keccak256(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    let _6 := mload(_2)\n                    let _7 := datasize(\"MockV3Aggregator_48609_deployed\")\n                    codecopy(_6, dataoffset(\"MockV3Aggregator_48609_deployed\"), _7)\n                    return(_6, _7)\n                }\n            }\n            /// @use-src 36:\"test/mocks/MockV3Aggregator.sol\"\n            object \"MockV3Aggregator_48609_deployed\" {\n                code {\n                    {\n                        /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x313ce567 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                mstore(_1, and(sload(_4), 0xff))\n                                return(_1, 32)\n                            }\n                            case 0x4aa2011f {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 128) { revert(_4, _4) }\n                                let value0 := abi_decode_uint80()\n                                let value := calldataload(36)\n                                let value_1 := calldataload(68)\n                                let _5 := and(/** @src 36:1363:1385  \"latestRound = _roundId\" */ value0, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ 0xffffffffffffffffffff)\n                                sstore(/** @src 36:1363:1385  \"latestRound = _roundId\" */ 0x03, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _5)\n                                sstore(1, value)\n                                sstore(/** @src 36:1427:1455  \"latestTimestamp = _timestamp\" */ 0x02, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ value_1)\n                                mstore(_4, _5)\n                                mstore(32, _3)\n                                sstore(keccak256(_4, _2), value)\n                                mstore(_4, sload(/** @src 36:1363:1385  \"latestRound = _roundId\" */ 0x03))\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                mstore(32, /** @src 36:1507:1519  \"getTimestamp\" */ 0x05)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                sstore(keccak256(_4, _2), value_1)\n                                mstore(_4, sload(/** @src 36:1363:1385  \"latestRound = _roundId\" */ 0x03))\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                mstore(32, /** @src 36:1555:1567  \"getStartedAt\" */ 0x06)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                sstore(keccak256(_4, _2), calldataload(100))\n                                return(_4, _4)\n                            }\n                            case 0x50d25bcd {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _6 := sload(/** @src 36:553:579  \"int256 public latestAnswer\" */ 1)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                let memPos := mload(_2)\n                                mstore(memPos, _6)\n                                return(memPos, 32)\n                            }\n                            case 0x54fd4d50 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, _3)\n                                return(memPos_1, 32)\n                            }\n                            case 0x668a0f02 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _7 := sload(/** @src 36:621:647  \"uint256 public latestRound\" */ 3)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                let memPos_2 := mload(_2)\n                                mstore(memPos_2, _7)\n                                return(memPos_2, 32)\n                            }\n                            case 0x7284e416 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPtr := mload(_2)\n                                let newFreePtr := add(memPtr, 96)\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(_2, newFreePtr)\n                                mstore(memPtr, 35)\n                                let _8 := 0x20\n                                mstore(add(memPtr, _8), \"v0.6/test/mock/MockV3Aggregator.\")\n                                mstore(add(memPtr, _2), \"sol\")\n                                let memPos_3 := mload(_2)\n                                mstore(memPos_3, _8)\n                                let length := mload(memPtr)\n                                mstore(add(memPos_3, _8), length)\n                                let i := _4\n                                for { } lt(i, length) { i := add(i, _8) }\n                                {\n                                    mstore(add(add(memPos_3, i), _2), mload(add(add(memPtr, i), _8)))\n                                }\n                                mstore(add(add(memPos_3, length), _2), _4)\n                                return(memPos_3, add(sub(add(memPos_3, and(add(length, 31), not(31))), memPos_3), _2))\n                            }\n                            case 0x8205bf6a {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _9 := sload(/** @src 36:585:615  \"uint256 public latestTimestamp\" */ 2)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                let memPos_4 := mload(_2)\n                                mstore(memPos_4, _9)\n                                return(memPos_4, 32)\n                            }\n                            case 0x9a6fc8f5 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let value0_1 := abi_decode_uint80()\n                                mstore(_4, and(value0_1, 0xffffffffffffffffffff))\n                                mstore(32, _3)\n                                let _10 := sload(keccak256(_4, _2))\n                                mstore(32, /** @src 36:1838:1850  \"getStartedAt\" */ 0x06)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                let _11 := sload(keccak256(_4, _2))\n                                mstore(32, /** @src 36:1862:1874  \"getTimestamp\" */ 0x05)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                let _12 := sload(keccak256(_4, _2))\n                                let memPos_5 := mload(_2)\n                                return(memPos_5, sub(abi_encode_uint80_int256_uint256_uint256_uint80(memPos_5, value0_1, _10, _11, _12, value0_1), memPos_5))\n                            }\n                            case 0xa87a20ce {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                let value_2 := calldataload(_3)\n                                sstore(1, value_2)\n                                sstore(/** @src 36:1031:1064  \"latestTimestamp = block.timestamp\" */ 0x02, /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                let _13 := sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                if eq(_13, not(0))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x11)\n                                    revert(_4, 0x24)\n                                }\n                                let ret := add(_13, 1)\n                                sstore(/** @src 36:1074:1087  \"latestRound++\" */ 0x03, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ ret)\n                                mstore(_4, ret)\n                                mstore(32, _3)\n                                sstore(keccak256(_4, _2), value_2)\n                                mstore(_4, sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                mstore(32, /** @src 36:1139:1151  \"getTimestamp\" */ 0x05)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                sstore(keccak256(_4, _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                mstore(_4, sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                mstore(32, /** @src 36:1192:1204  \"getStartedAt\" */ 0x06)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                sstore(keccak256(_4, _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                return(_4, _4)\n                            }\n                            case 0xb5ab58dc {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                mstore(_4, calldataload(_3))\n                                mstore(32, _3)\n                                let _14 := sload(keccak256(_4, _2))\n                                let memPos_6 := mload(_2)\n                                mstore(memPos_6, _14)\n                                return(memPos_6, 32)\n                            }\n                            case 0xb633620c {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                mstore(_4, calldataload(_3))\n                                mstore(32, /** @src 36:703:750  \"mapping(uint256 => uint256) public getTimestamp\" */ 5)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                let _15 := sload(keccak256(_4, _2))\n                                let memPos_7 := mload(_2)\n                                mstore(memPos_7, _15)\n                                return(memPos_7, 32)\n                            }\n                            case 0xfeaf968c {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _16 := sload(/** @src 36:2117:2128  \"latestRound\" */ 0x03)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                let converted := and(_16, 0xffffffffffffffffffff)\n                                mstore(_4, _16)\n                                mstore(0x20, _3)\n                                let _17 := sload(keccak256(_4, _2))\n                                mstore(0x20, /** @src 36:2179:2191  \"getStartedAt\" */ 0x06)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                let _18 := sload(keccak256(_4, _2))\n                                mstore(0x20, /** @src 36:2218:2230  \"getTimestamp\" */ 0x05)\n                                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                                let _19 := sload(keccak256(_4, _2))\n                                let memPos_8 := mload(_2)\n                                return(memPos_8, sub(abi_encode_uint80_int256_uint256_uint256_uint80(memPos_8, converted, _17, _18, _19, converted), memPos_8))\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function abi_decode_uint80() -> value\n                    {\n                        value := calldataload(4)\n                        if iszero(eq(value, and(value, 0xffffffffffffffffffff))) { revert(0, 0) }\n                    }\n                    function abi_encode_uint80_int256_uint256_uint256_uint80(headStart, value0, value1, value2, value3, value4) -> tail\n                    {\n                        tail := add(headStart, 160)\n                        let _1 := 0xffffffffffffffffffff\n                        mstore(headStart, and(value0, _1))\n                        mstore(add(headStart, 32), value1)\n                        mstore(add(headStart, 64), value2)\n                        mstore(add(headStart, 96), value3)\n                        mstore(add(headStart, 128), and(value4, _1))\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000813000a\"\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000813000a\"\n    }\n    /// @use-src 0:\"lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\", 36:\"test/mocks/MockV3Aggregator.sol\"\n    object \"MockV3Aggregator_48609\" {\n        code {\n            {\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                let _1 := memoryguard(0x80)\n                if callvalue() { revert(0, 0) }\n                let programSize := datasize(\"MockV3Aggregator_48609\")\n                let argSize := sub(codesize(), programSize)\n                let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n                if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ 0x24)\n                }\n                let _2 := 64\n                mstore(_2, newFreePtr)\n                codecopy(_1, programSize, argSize)\n                if slt(sub(add(_1, argSize), _1), _2)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                let value := mload(_1)\n                let _3 := and(value, 0xff)\n                if iszero(eq(value, _3))\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                let value_1 := mload(add(_1, 32))\n                /// @src -1:-1:-1\n                let _4 := 0\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                sstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ or(and(sload(/** @src -1:-1:-1 */ _4), /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ not(255)), _3))\n                sstore(1, value_1)\n                sstore(/** @src 36:1031:1064  \"latestTimestamp = block.timestamp\" */ 0x02, /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                let _5 := sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03)\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                if eq(_5, not(0))\n                {\n                    mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ 0x24)\n                }\n                let ret := add(_5, 1)\n                sstore(/** @src 36:1074:1087  \"latestRound++\" */ 0x03, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ ret)\n                mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ ret)\n                mstore(32, /** @src 36:1097:1106  \"getAnswer\" */ 0x04)\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                sstore(keccak256(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _2), value_1)\n                mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                mstore(32, /** @src 36:1139:1151  \"getTimestamp\" */ 0x05)\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                sstore(keccak256(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                mstore(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                mstore(32, /** @src 36:1192:1204  \"getStartedAt\" */ 0x06)\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                sstore(keccak256(/** @src -1:-1:-1 */ _4, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                let _6 := mload(_2)\n                let _7 := datasize(\"MockV3Aggregator_48609_deployed\")\n                codecopy(_6, dataoffset(\"MockV3Aggregator_48609_deployed\"), _7)\n                return(_6, _7)\n            }\n        }\n        /// @use-src 36:\"test/mocks/MockV3Aggregator.sol\"\n        object \"MockV3Aggregator_48609_deployed\" {\n            code {\n                {\n                    /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                    let _1 := memoryguard(0x80)\n                    let _2 := 64\n                    mstore(_2, _1)\n                    let _3 := 4\n                    if iszero(lt(calldatasize(), _3))\n                    {\n                        let _4 := 0\n                        switch shr(224, calldataload(_4))\n                        case 0x313ce567 {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                            mstore(_1, and(sload(_4), 0xff))\n                            return(_1, 32)\n                        }\n                        case 0x4aa2011f {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), 128) { revert(_4, _4) }\n                            let value0 := abi_decode_uint80()\n                            let value := calldataload(36)\n                            let value_1 := calldataload(68)\n                            let _5 := and(/** @src 36:1363:1385  \"latestRound = _roundId\" */ value0, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ 0xffffffffffffffffffff)\n                            sstore(/** @src 36:1363:1385  \"latestRound = _roundId\" */ 0x03, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ _5)\n                            sstore(1, value)\n                            sstore(/** @src 36:1427:1455  \"latestTimestamp = _timestamp\" */ 0x02, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ value_1)\n                            mstore(_4, _5)\n                            mstore(32, _3)\n                            sstore(keccak256(_4, _2), value)\n                            mstore(_4, sload(/** @src 36:1363:1385  \"latestRound = _roundId\" */ 0x03))\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            mstore(32, /** @src 36:1507:1519  \"getTimestamp\" */ 0x05)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            sstore(keccak256(_4, _2), value_1)\n                            mstore(_4, sload(/** @src 36:1363:1385  \"latestRound = _roundId\" */ 0x03))\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            mstore(32, /** @src 36:1555:1567  \"getStartedAt\" */ 0x06)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            sstore(keccak256(_4, _2), calldataload(100))\n                            return(_4, _4)\n                        }\n                        case 0x50d25bcd {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                            let _6 := sload(/** @src 36:553:579  \"int256 public latestAnswer\" */ 1)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            let memPos := mload(_2)\n                            mstore(memPos, _6)\n                            return(memPos, 32)\n                        }\n                        case 0x54fd4d50 {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                            let memPos_1 := mload(_2)\n                            mstore(memPos_1, _3)\n                            return(memPos_1, 32)\n                        }\n                        case 0x668a0f02 {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                            let _7 := sload(/** @src 36:621:647  \"uint256 public latestRound\" */ 3)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            let memPos_2 := mload(_2)\n                            mstore(memPos_2, _7)\n                            return(memPos_2, 32)\n                        }\n                        case 0x7284e416 {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                            let memPtr := mload(_2)\n                            let newFreePtr := add(memPtr, 96)\n                            if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                            {\n                                mstore(_4, shl(224, 0x4e487b71))\n                                mstore(_3, 0x41)\n                                revert(_4, 0x24)\n                            }\n                            mstore(_2, newFreePtr)\n                            mstore(memPtr, 35)\n                            let _8 := 0x20\n                            mstore(add(memPtr, _8), \"v0.6/test/mock/MockV3Aggregator.\")\n                            mstore(add(memPtr, _2), \"sol\")\n                            let memPos_3 := mload(_2)\n                            mstore(memPos_3, _8)\n                            let length := mload(memPtr)\n                            mstore(add(memPos_3, _8), length)\n                            let i := _4\n                            for { } lt(i, length) { i := add(i, _8) }\n                            {\n                                mstore(add(add(memPos_3, i), _2), mload(add(add(memPtr, i), _8)))\n                            }\n                            mstore(add(add(memPos_3, length), _2), _4)\n                            return(memPos_3, add(sub(add(memPos_3, and(add(length, 31), not(31))), memPos_3), _2))\n                        }\n                        case 0x8205bf6a {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                            let _9 := sload(/** @src 36:585:615  \"uint256 public latestTimestamp\" */ 2)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            let memPos_4 := mload(_2)\n                            mstore(memPos_4, _9)\n                            return(memPos_4, 32)\n                        }\n                        case 0x9a6fc8f5 {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                            let value0_1 := abi_decode_uint80()\n                            mstore(_4, and(value0_1, 0xffffffffffffffffffff))\n                            mstore(32, _3)\n                            let _10 := sload(keccak256(_4, _2))\n                            mstore(32, /** @src 36:1838:1850  \"getStartedAt\" */ 0x06)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            let _11 := sload(keccak256(_4, _2))\n                            mstore(32, /** @src 36:1862:1874  \"getTimestamp\" */ 0x05)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            let _12 := sload(keccak256(_4, _2))\n                            let memPos_5 := mload(_2)\n                            return(memPos_5, sub(abi_encode_uint80_int256_uint256_uint256_uint80(memPos_5, value0_1, _10, _11, _12, value0_1), memPos_5))\n                        }\n                        case 0xa87a20ce {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                            let value_2 := calldataload(_3)\n                            sstore(1, value_2)\n                            sstore(/** @src 36:1031:1064  \"latestTimestamp = block.timestamp\" */ 0x02, /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            let _13 := sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            if eq(_13, not(0))\n                            {\n                                mstore(_4, shl(224, 0x4e487b71))\n                                mstore(_3, 0x11)\n                                revert(_4, 0x24)\n                            }\n                            let ret := add(_13, 1)\n                            sstore(/** @src 36:1074:1087  \"latestRound++\" */ 0x03, /** @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\" */ ret)\n                            mstore(_4, ret)\n                            mstore(32, _3)\n                            sstore(keccak256(_4, _2), value_2)\n                            mstore(_4, sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            mstore(32, /** @src 36:1139:1151  \"getTimestamp\" */ 0x05)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            sstore(keccak256(_4, _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            mstore(_4, sload(/** @src 36:1074:1087  \"latestRound++\" */ 0x03))\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            mstore(32, /** @src 36:1192:1204  \"getStartedAt\" */ 0x06)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            sstore(keccak256(_4, _2), /** @src 36:1049:1064  \"block.timestamp\" */ timestamp())\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            return(_4, _4)\n                        }\n                        case 0xb5ab58dc {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                            mstore(_4, calldataload(_3))\n                            mstore(32, _3)\n                            let _14 := sload(keccak256(_4, _2))\n                            let memPos_6 := mload(_2)\n                            mstore(memPos_6, _14)\n                            return(memPos_6, 32)\n                        }\n                        case 0xb633620c {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                            mstore(_4, calldataload(_3))\n                            mstore(32, /** @src 36:703:750  \"mapping(uint256 => uint256) public getTimestamp\" */ 5)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            let _15 := sload(keccak256(_4, _2))\n                            let memPos_7 := mload(_2)\n                            mstore(memPos_7, _15)\n                            return(memPos_7, 32)\n                        }\n                        case 0xfeaf968c {\n                            if callvalue() { revert(_4, _4) }\n                            if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                            let _16 := sload(/** @src 36:2117:2128  \"latestRound\" */ 0x03)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            let converted := and(_16, 0xffffffffffffffffffff)\n                            mstore(_4, _16)\n                            mstore(0x20, _3)\n                            let _17 := sload(keccak256(_4, _2))\n                            mstore(0x20, /** @src 36:2179:2191  \"getStartedAt\" */ 0x06)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            let _18 := sload(keccak256(_4, _2))\n                            mstore(0x20, /** @src 36:2218:2230  \"getTimestamp\" */ 0x05)\n                            /// @src 36:427:2423  \"contract MockV3Aggregator is AggregatorV3Interface {...\"\n                            let _19 := sload(keccak256(_4, _2))\n                            let memPos_8 := mload(_2)\n                            return(memPos_8, sub(abi_encode_uint80_int256_uint256_uint256_uint80(memPos_8, converted, _17, _18, _19, converted), memPos_8))\n                        }\n                    }\n                    revert(0, 0)\n                }\n                function abi_decode_uint80() -> value\n                {\n                    value := calldataload(4)\n                    if iszero(eq(value, and(value, 0xffffffffffffffffffff))) { revert(0, 0) }\n                }\n                function abi_encode_uint80_int256_uint256_uint256_uint80(headStart, value0, value1, value2, value3, value4) -> tail\n                {\n                    tail := add(headStart, 160)\n                    let _1 := 0xffffffffffffffffffff\n                    mstore(headStart, and(value0, _1))\n                    mstore(add(headStart, 32), value1)\n                    mstore(add(headStart, 64), value2)\n                    mstore(add(headStart, 96), value3)\n                    mstore(add(headStart, 128), and(value4, _1))\n                }\n            }\n            data \".metadata\" hex\"a164736f6c6343000813000a\"\n        }\n    }\n}\n","hash":"010000d143a1ba119e0f82c1fd98745008c15c54ee95ecf0bda1a37e7ec07ff8","factoryDependencies":{"010000919b8eecd8197a23f2f31510aa079fac2d23b958f60d7795a898ccda3f":"test/mocks/MockV3Aggregator.sol:MockV3Aggregator"},"id":31}